/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require("../ApiClient");
const GrpcGatewayRuntimeError = require('../model/GrpcGatewayRuntimeError');
const IoArgoprojWorkflowV1alpha1CollectEventRequest = require('../model/IoArgoprojWorkflowV1alpha1CollectEventRequest');
const IoArgoprojWorkflowV1alpha1CollectEventResponse = require('../model/IoArgoprojWorkflowV1alpha1CollectEventResponse');
const IoArgoprojWorkflowV1alpha1GetUserInfoResponse = require('../model/IoArgoprojWorkflowV1alpha1GetUserInfoResponse');
const IoArgoprojWorkflowV1alpha1InfoResponse = require('../model/IoArgoprojWorkflowV1alpha1InfoResponse');
const IoArgoprojWorkflowV1alpha1Version = require('../model/IoArgoprojWorkflowV1alpha1Version');

/**
* InfoService service.
* @module api/InfoServiceApi
* @version VERSION
*/
class InfoServiceApi {

    /**
    * Constructs a new InfoServiceApi. 
    * @alias module:api/InfoServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the infoServiceCollectEvent operation.
     * @callback moduleapi/InfoServiceApi~infoServiceCollectEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1CollectEventResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1CollectEventRequest} body 
     * @param {module:api/InfoServiceApi~infoServiceCollectEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    infoServiceCollectEvent(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling infoServiceCollectEvent");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1CollectEventResponse;

      return this.apiClient.callApi(
        '/api/v1/tracking/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the infoServiceGetInfo operation.
     * @callback moduleapi/InfoServiceApi~infoServiceGetInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1InfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/InfoServiceApi~infoServiceGetInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    infoServiceGetInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1InfoResponse;

      return this.apiClient.callApi(
        '/api/v1/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the infoServiceGetUserInfo operation.
     * @callback moduleapi/InfoServiceApi~infoServiceGetUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1GetUserInfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/InfoServiceApi~infoServiceGetUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    infoServiceGetUserInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1GetUserInfoResponse;

      return this.apiClient.callApi(
        '/api/v1/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the infoServiceGetVersion operation.
     * @callback moduleapi/InfoServiceApi~infoServiceGetVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Version{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/InfoServiceApi~infoServiceGetVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    infoServiceGetVersion(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Version;

      return this.apiClient.callApi(
        '/api/v1/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
module.exports = InfoServiceApi;