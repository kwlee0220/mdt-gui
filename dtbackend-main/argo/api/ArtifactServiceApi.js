/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require("../ApiClient");
const GrpcGatewayRuntimeError = require('../model/GrpcGatewayRuntimeError');

/**
* ArtifactService service.
* @module api/ArtifactServiceApi
* @version VERSION
*/
class ArtifactServiceApi {

    /**
    * Constructs a new ArtifactServiceApi. 
    * @alias module:api/ArtifactServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the artifactServiceGetArtifactFile operation.
     * @callback moduleapi/ArtifactServiceApi~artifactServiceGetArtifactFileCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an artifact.
     * @param {String} namespace 
     * @param {module:model/String} idDiscriminator 
     * @param {String} id 
     * @param {String} nodeId 
     * @param {String} artifactName 
     * @param {module:model/String} artifactDiscriminator 
     * @param {module:api/ArtifactServiceApi~artifactServiceGetArtifactFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    artifactServiceGetArtifactFile(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, callback) {
      
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling artifactServiceGetArtifactFile");
      }
      // verify the required parameter 'idDiscriminator' is set
      if (idDiscriminator === undefined || idDiscriminator === null) {
        throw new Error("Missing the required parameter 'idDiscriminator' when calling artifactServiceGetArtifactFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling artifactServiceGetArtifactFile");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling artifactServiceGetArtifactFile");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactServiceGetArtifactFile");
      }
      // verify the required parameter 'artifactDiscriminator' is set
      if (artifactDiscriminator === undefined || artifactDiscriminator === null) {
        throw new Error("Missing the required parameter 'artifactDiscriminator' when calling artifactServiceGetArtifactFile");
      }

      let pathParams = {
        'namespace': namespace,'idDiscriminator': idDiscriminator,'id': id,'nodeId': nodeId,'artifactName': artifactName,'artifactDiscriminator': artifactDiscriminator
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the artifactServiceGetInputArtifact operation.
     * @callback moduleapi/ArtifactServiceApi~artifactServiceGetInputArtifactCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an input artifact.
     * @param {String} namespace 
     * @param {String} name 
     * @param {String} nodeId 
     * @param {String} artifactName 
     * @param {module:api/ArtifactServiceApi~artifactServiceGetInputArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    artifactServiceGetInputArtifact(namespace, name, nodeId, artifactName, callback) {
      
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling artifactServiceGetInputArtifact");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling artifactServiceGetInputArtifact");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifact");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifact");
      }

      let pathParams = {
        'namespace': namespace,'name': name,'nodeId': nodeId,'artifactName': artifactName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the artifactServiceGetInputArtifactByUID operation.
     * @callback moduleapi/ArtifactServiceApi~artifactServiceGetInputArtifactByUIDCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an input artifact by UID.
     * @param {String} uid 
     * @param {String} nodeId 
     * @param {String} artifactName 
     * @param {module:api/ArtifactServiceApi~artifactServiceGetInputArtifactByUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    artifactServiceGetInputArtifactByUID(uid, nodeId, artifactName, callback) {
      
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling artifactServiceGetInputArtifactByUID");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifactByUID");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifactByUID");
      }

      let pathParams = {
        'uid': uid,'nodeId': nodeId,'artifactName': artifactName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the artifactServiceGetOutputArtifact operation.
     * @callback moduleapi/ArtifactServiceApi~artifactServiceGetOutputArtifactCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an output artifact.
     * @param {String} namespace 
     * @param {String} name 
     * @param {String} nodeId 
     * @param {String} artifactName 
     * @param {module:api/ArtifactServiceApi~artifactServiceGetOutputArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    artifactServiceGetOutputArtifact(namespace, name, nodeId, artifactName, callback) {
      
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling artifactServiceGetOutputArtifact");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling artifactServiceGetOutputArtifact");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifact");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifact");
      }

      let pathParams = {
        'namespace': namespace,'name': name,'nodeId': nodeId,'artifactName': artifactName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/artifacts/{namespace}/{name}/{nodeId}/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the artifactServiceGetOutputArtifactByUID operation.
     * @callback moduleapi/ArtifactServiceApi~artifactServiceGetOutputArtifactByUIDCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an output artifact by UID.
     * @param {String} uid 
     * @param {String} nodeId 
     * @param {String} artifactName 
     * @param {module:api/ArtifactServiceApi~artifactServiceGetOutputArtifactByUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    artifactServiceGetOutputArtifactByUID(uid, nodeId, artifactName, callback) {
      
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling artifactServiceGetOutputArtifactByUID");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifactByUID");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifactByUID");
      }

      let pathParams = {
        'uid': uid,'nodeId': nodeId,'artifactName': artifactName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/artifacts-by-uid/{uid}/{nodeId}/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}

module.exports = ArtifactServiceApi;