/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const GrpcGatewayRuntimeError = require('../model/GrpcGatewayRuntimeError');
const IoArgoprojWorkflowV1alpha1Workflow = require('../model/IoArgoprojWorkflowV1alpha1Workflow');
const IoArgoprojWorkflowV1alpha1WorkflowCreateRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowCreateRequest');
const IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse = require('../model/IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse');
const IoArgoprojWorkflowV1alpha1WorkflowLintRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowLintRequest');
const IoArgoprojWorkflowV1alpha1WorkflowList = require('../model/IoArgoprojWorkflowV1alpha1WorkflowList');
const IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest');
const IoArgoprojWorkflowV1alpha1WorkflowResumeRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowResumeRequest');
const IoArgoprojWorkflowV1alpha1WorkflowRetryRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowRetryRequest');
const IoArgoprojWorkflowV1alpha1WorkflowSetRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowSetRequest');
const IoArgoprojWorkflowV1alpha1WorkflowStopRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowStopRequest');
const IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest');
const IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest');
const IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest = require('../model/IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest');
const StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry = require('../model/StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry');
const StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent = require('../model/StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent');
const StreamResultOfIoK8sApiCoreV1Event = require('../model/StreamResultOfIoK8sApiCoreV1Event');

/**
* WorkflowService service.
* @module api/WorkflowServiceApi
* @version VERSION
*/
class WorkflowServiceApi {

    /**
    * Constructs a new WorkflowServiceApi. 
    * @alias module:api/WorkflowServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the workflowServiceCreateWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceCreateWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowCreateRequest} body 
     * @param {String} namespace 
     * @param {module:api/WorkflowServiceApi~workflowServiceCreateWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceCreateWorkflow(body, namespace, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceCreateWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceCreateWorkflow");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      console.log("WorkflowServiceApi.apiClient:", this.apiClient);
      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceDeleteWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceDeleteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.deleteOptionsGracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
     * @param {String} opts.deleteOptionsPreconditionsUid Specifies the target UID. +optional.
     * @param {String} opts.deleteOptionsPreconditionsResourceVersion Specifies the target ResourceVersion +optional.
     * @param {Boolean} opts.deleteOptionsOrphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#x27;s finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
     * @param {String} opts.deleteOptionsPropagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#x27;Orphan&#x27; - orphan the dependents; &#x27;Background&#x27; - allow the garbage collector to delete the dependents in the background; &#x27;Foreground&#x27; - a cascading policy that deletes all dependents in the foreground. +optional.
     * @param {Array.<String>} opts.deleteOptionsDryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional +listType&#x3D;atomic.
     * @param {Boolean} opts.force 
     * @param {module:api/WorkflowServiceApi~workflowServiceDeleteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceDeleteWorkflow(namespace, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceDeleteWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceDeleteWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        'deleteOptions.gracePeriodSeconds': opts['deleteOptionsGracePeriodSeconds'],'deleteOptions.preconditions.uid': opts['deleteOptionsPreconditionsUid'],'deleteOptions.preconditions.resourceVersion': opts['deleteOptionsPreconditionsResourceVersion'],'deleteOptions.orphanDependents': opts['deleteOptionsOrphanDependents'],'deleteOptions.propagationPolicy': opts['deleteOptionsPropagationPolicy'],'deleteOptions.dryRun': this.apiClient.buildCollectionParam(opts['deleteOptionsDryRun'], 'multi'),'force': opts['force']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceGetWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceGetWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.getOptionsResourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.fields Fields to be included or excluded in the response. e.g. \&quot;spec,status.phase\&quot;, \&quot;-status.nodes\&quot;.
     * @param {module:api/WorkflowServiceApi~workflowServiceGetWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceGetWorkflow(namespace, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceGetWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceGetWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        'getOptions.resourceVersion': opts['getOptionsResourceVersion'],'fields': opts['fields']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceLintWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceLintWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowLintRequest} body 
     * @param {String} namespace 
     * @param {module:api/WorkflowServiceApi~workflowServiceLintWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceLintWorkflow(body, namespace, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceLintWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceLintWorkflow");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/lint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceListWorkflows operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceListWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {Object} opts Optional parameters
     * @param {String} opts.listOptionsLabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {String} opts.listOptionsFieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {Boolean} opts.listOptionsWatch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {Boolean} opts.listOptionsAllowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {String} opts.listOptionsResourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsResourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsTimeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {String} opts.listOptionsLimit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {String} opts.listOptionsContinue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {Boolean} opts.listOptionsSendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;io.k8s.initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise. +optional
     * @param {String} opts.fields Fields to be included or excluded in the response. e.g. \&quot;items.spec,items.status.phase\&quot;, \&quot;-items.status.nodes\&quot;.
     * @param {String} opts.nameFilter Filter type used for name filtering. Exact | Contains | Prefix. Default to Exact.
     * @param {module:api/WorkflowServiceApi~workflowServiceListWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceListWorkflows(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceListWorkflows");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'listOptions.labelSelector': opts['listOptionsLabelSelector'],'listOptions.fieldSelector': opts['listOptionsFieldSelector'],'listOptions.watch': opts['listOptionsWatch'],'listOptions.allowWatchBookmarks': opts['listOptionsAllowWatchBookmarks'],'listOptions.resourceVersion': opts['listOptionsResourceVersion'],'listOptions.resourceVersionMatch': opts['listOptionsResourceVersionMatch'],'listOptions.timeoutSeconds': opts['listOptionsTimeoutSeconds'],'listOptions.limit': opts['listOptionsLimit'],'listOptions.continue': opts['listOptionsContinue'],'listOptions.sendInitialEvents': opts['listOptionsSendInitialEvents'],'fields': opts['fields'],'nameFilter': opts['nameFilter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1WorkflowList;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServicePodLogs operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServicePodLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
     * @param {String} namespace 
     * @param {String} name 
     * @param {String} podName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.logOptionsContainer The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {Boolean} opts.logOptionsFollow Follow the log stream of the pod. Defaults to false. +optional.
     * @param {Boolean} opts.logOptionsPrevious Return previous terminated container logs. Defaults to false. +optional.
     * @param {String} opts.logOptionsSinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {String} opts.logOptionsSinceTimeSeconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {Number} opts.logOptionsSinceTimeNanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {Boolean} opts.logOptionsTimestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {String} opts.logOptionsTailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {String} opts.logOptionsLimitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {Boolean} opts.logOptionsInsecureSkipTLSVerifyBackend insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {String} opts.grep 
     * @param {String} opts.selector 
     * @param {module:api/WorkflowServiceApi~workflowServicePodLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServicePodLogs(namespace, name, podName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServicePodLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServicePodLogs");
      }
      // verify the required parameter 'podName' is set
      if (podName === undefined || podName === null) {
        throw new Error("Missing the required parameter 'podName' when calling workflowServicePodLogs");
      }

      let pathParams = {
        'namespace': namespace,'name': name,'podName': podName
      };
      let queryParams = {
        'logOptions.container': opts['logOptionsContainer'],'logOptions.follow': opts['logOptionsFollow'],'logOptions.previous': opts['logOptionsPrevious'],'logOptions.sinceSeconds': opts['logOptionsSinceSeconds'],'logOptions.sinceTime.seconds': opts['logOptionsSinceTimeSeconds'],'logOptions.sinceTime.nanos': opts['logOptionsSinceTimeNanos'],'logOptions.timestamps': opts['logOptionsTimestamps'],'logOptions.tailLines': opts['logOptionsTailLines'],'logOptions.limitBytes': opts['logOptionsLimitBytes'],'logOptions.insecureSkipTLSVerifyBackend': opts['logOptionsInsecureSkipTLSVerifyBackend'],'grep': opts['grep'],'selector': opts['selector']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/{podName}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceResubmitWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceResubmitWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceResubmitWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceResubmitWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceResubmitWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceResubmitWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceResubmitWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/resubmit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceResumeWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceResumeWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowResumeRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceResumeWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceResumeWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceResumeWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceResumeWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceResumeWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/resume', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceRetryWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceRetryWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowRetryRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceRetryWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceRetryWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceRetryWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceRetryWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceRetryWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/retry', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceSetWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceSetWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowSetRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceSetWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceSetWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceSetWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceSetWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceSetWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/set', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceStopWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceStopWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowStopRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceStopWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceStopWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceStopWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceStopWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceStopWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceSubmitWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceSubmitWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest} body 
     * @param {String} namespace 
     * @param {module:api/WorkflowServiceApi~workflowServiceSubmitWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceSubmitWorkflow(body, namespace, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceSubmitWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceSubmitWorkflow");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceSuspendWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceSuspendWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceSuspendWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceSuspendWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceSuspendWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceSuspendWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceSuspendWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/suspend', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceTerminateWorkflow operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceTerminateWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoArgoprojWorkflowV1alpha1Workflow{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest} body 
     * @param {String} namespace 
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceTerminateWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceTerminateWorkflow(body, namespace, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceTerminateWorkflow");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceTerminateWorkflow");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceTerminateWorkflow");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IoArgoprojWorkflowV1alpha1Workflow;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/terminate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceWatchEvents operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceWatchEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfIoK8sApiCoreV1Event{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {Object} opts Optional parameters
     * @param {String} opts.listOptionsLabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {String} opts.listOptionsFieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {Boolean} opts.listOptionsWatch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {Boolean} opts.listOptionsAllowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {String} opts.listOptionsResourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsResourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsTimeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {String} opts.listOptionsLimit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {String} opts.listOptionsContinue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {Boolean} opts.listOptionsSendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;io.k8s.initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise. +optional
     * @param {module:api/WorkflowServiceApi~workflowServiceWatchEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceWatchEvents(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceWatchEvents");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'listOptions.labelSelector': opts['listOptionsLabelSelector'],'listOptions.fieldSelector': opts['listOptionsFieldSelector'],'listOptions.watch': opts['listOptionsWatch'],'listOptions.allowWatchBookmarks': opts['listOptionsAllowWatchBookmarks'],'listOptions.resourceVersion': opts['listOptionsResourceVersion'],'listOptions.resourceVersionMatch': opts['listOptionsResourceVersionMatch'],'listOptions.timeoutSeconds': opts['listOptionsTimeoutSeconds'],'listOptions.limit': opts['listOptionsLimit'],'listOptions.continue': opts['listOptionsContinue'],'listOptions.sendInitialEvents': opts['listOptionsSendInitialEvents']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamResultOfIoK8sApiCoreV1Event;

      return this.apiClient.callApi(
        '/api/v1/stream/events/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceWatchWorkflows operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceWatchWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {Object} opts Optional parameters
     * @param {String} opts.listOptionsLabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
     * @param {String} opts.listOptionsFieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
     * @param {Boolean} opts.listOptionsWatch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
     * @param {Boolean} opts.listOptionsAllowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#x27;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
     * @param {String} opts.listOptionsResourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsResourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
     * @param {String} opts.listOptionsTimeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
     * @param {String} opts.listOptionsLimit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {String} opts.listOptionsContinue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {Boolean} opts.listOptionsSendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;io.k8s.initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise. +optional
     * @param {String} opts.fields 
     * @param {module:api/WorkflowServiceApi~workflowServiceWatchWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceWatchWorkflows(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceWatchWorkflows");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'listOptions.labelSelector': opts['listOptionsLabelSelector'],'listOptions.fieldSelector': opts['listOptionsFieldSelector'],'listOptions.watch': opts['listOptionsWatch'],'listOptions.allowWatchBookmarks': opts['listOptionsAllowWatchBookmarks'],'listOptions.resourceVersion': opts['listOptionsResourceVersion'],'listOptions.resourceVersionMatch': opts['listOptionsResourceVersionMatch'],'listOptions.timeoutSeconds': opts['listOptionsTimeoutSeconds'],'listOptions.limit': opts['listOptionsLimit'],'listOptions.continue': opts['listOptionsContinue'],'listOptions.sendInitialEvents': opts['listOptionsSendInitialEvents'],'fields': opts['fields']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent;

      return this.apiClient.callApi(
        '/api/v1/workflow-events/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the workflowServiceWorkflowLogs operation.
     * @callback moduleapi/WorkflowServiceApi~workflowServiceWorkflowLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} namespace 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} opts.podName 
     * @param {String} opts.logOptionsContainer The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
     * @param {Boolean} opts.logOptionsFollow Follow the log stream of the pod. Defaults to false. +optional.
     * @param {Boolean} opts.logOptionsPrevious Return previous terminated container logs. Defaults to false. +optional.
     * @param {String} opts.logOptionsSinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
     * @param {String} opts.logOptionsSinceTimeSeconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
     * @param {Number} opts.logOptionsSinceTimeNanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
     * @param {Boolean} opts.logOptionsTimestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
     * @param {String} opts.logOptionsTailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
     * @param {String} opts.logOptionsLimitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
     * @param {Boolean} opts.logOptionsInsecureSkipTLSVerifyBackend insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver&#x27;s TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
     * @param {String} opts.grep 
     * @param {String} opts.selector 
     * @param {module:api/WorkflowServiceApi~workflowServiceWorkflowLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    workflowServiceWorkflowLogs(namespace, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling workflowServiceWorkflowLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceWorkflowLogs");
      }

      let pathParams = {
        'namespace': namespace,'name': name
      };
      let queryParams = {
        'podName': opts['podName'],'logOptions.container': opts['logOptionsContainer'],'logOptions.follow': opts['logOptionsFollow'],'logOptions.previous': opts['logOptionsPrevious'],'logOptions.sinceSeconds': opts['logOptionsSinceSeconds'],'logOptions.sinceTime.seconds': opts['logOptionsSinceTimeSeconds'],'logOptions.sinceTime.nanos': opts['logOptionsSinceTimeNanos'],'logOptions.timestamps': opts['logOptionsTimestamps'],'logOptions.tailLines': opts['logOptionsTailLines'],'logOptions.limitBytes': opts['logOptionsLimitBytes'],'logOptions.insecureSkipTLSVerifyBackend': opts['logOptionsInsecureSkipTLSVerifyBackend'],'grep': opts['grep'],'selector': opts['selector']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry;

      return this.apiClient.callApi(
        '/api/v1/workflows/{namespace}/{name}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
module.exports = WorkflowServiceApi;