/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojEventsV1alpha1EventSourceFilter = require('./IoArgoprojEventsV1alpha1EventSourceFilter');
const IoArgoprojEventsV1alpha1GithubAppCreds = require('./IoArgoprojEventsV1alpha1GithubAppCreds');
const IoArgoprojEventsV1alpha1OwnedRepositories = require('./IoArgoprojEventsV1alpha1OwnedRepositories');
const IoArgoprojEventsV1alpha1WebhookContext = require('./IoArgoprojEventsV1alpha1WebhookContext');
const IoK8sApiCoreV1SecretKeySelector = require('./IoK8sApiCoreV1SecretKeySelector');

/**
 * The IoArgoprojEventsV1alpha1GithubEventSource model module.
 * @module model/IoArgoprojEventsV1alpha1GithubEventSource
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1GithubEventSource {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1GithubEventSource</code>.
   * @alias module:model/IoArgoprojEventsV1alpha1GithubEventSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1GithubEventSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1GithubEventSource} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1GithubEventSource} The populated <code>IoArgoprojEventsV1alpha1GithubEventSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1GithubEventSource();
      if (data.hasOwnProperty('active'))
        obj.active = ApiClient.convertToType(data['active'], 'Boolean');
      if (data.hasOwnProperty('apiToken'))
        obj.apiToken = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['apiToken']);
      if (data.hasOwnProperty('contentType'))
        obj.contentType = ApiClient.convertToType(data['contentType'], 'String');
      if (data.hasOwnProperty('deleteHookOnFinish'))
        obj.deleteHookOnFinish = ApiClient.convertToType(data['deleteHookOnFinish'], 'Boolean');
      if (data.hasOwnProperty('events'))
        obj.events = ApiClient.convertToType(data['events'], ['String']);
      if (data.hasOwnProperty('filter'))
        obj.filter = IoArgoprojEventsV1alpha1EventSourceFilter.constructFromObject(data['filter']);
      if (data.hasOwnProperty('githubApp'))
        obj.githubApp = IoArgoprojEventsV1alpha1GithubAppCreds.constructFromObject(data['githubApp']);
      if (data.hasOwnProperty('githubBaseURL'))
        obj.githubBaseURL = ApiClient.convertToType(data['githubBaseURL'], 'String');
      if (data.hasOwnProperty('githubUploadURL'))
        obj.githubUploadURL = ApiClient.convertToType(data['githubUploadURL'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('insecure'))
        obj.insecure = ApiClient.convertToType(data['insecure'], 'Boolean');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], {'String': 'String'});
      if (data.hasOwnProperty('organizations'))
        obj.organizations = ApiClient.convertToType(data['organizations'], ['String']);
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], 'String');
      if (data.hasOwnProperty('repositories'))
        obj.repositories = ApiClient.convertToType(data['repositories'], [IoArgoprojEventsV1alpha1OwnedRepositories]);
      if (data.hasOwnProperty('repository'))
        obj.repository = ApiClient.convertToType(data['repository'], 'String');
      if (data.hasOwnProperty('webhook'))
        obj.webhook = IoArgoprojEventsV1alpha1WebhookContext.constructFromObject(data['webhook']);
      if (data.hasOwnProperty('webhookSecret'))
        obj.webhookSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['webhookSecret']);
    }
    return obj;
  }
}

/**
 * @member {Boolean} active
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.active = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} apiToken
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.apiToken = undefined;

/**
 * @member {String} contentType
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.contentType = undefined;

/**
 * @member {Boolean} deleteHookOnFinish
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.deleteHookOnFinish = undefined;

/**
 * @member {Array.<String>} events
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.events = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1EventSourceFilter} filter
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.filter = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1GithubAppCreds} githubApp
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.githubApp = undefined;

/**
 * @member {String} githubBaseURL
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.githubBaseURL = undefined;

/**
 * @member {String} githubUploadURL
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.githubUploadURL = undefined;

/**
 * @member {String} id
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.id = undefined;

/**
 * @member {Boolean} insecure
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.insecure = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.metadata = undefined;

/**
 * @member {Array.<String>} organizations
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.organizations = undefined;

/**
 * @member {String} owner
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.owner = undefined;

/**
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1OwnedRepositories>} repositories
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.repositories = undefined;

/**
 * @member {String} repository
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.repository = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1WebhookContext} webhook
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.webhook = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} webhookSecret
 */
IoArgoprojEventsV1alpha1GithubEventSource.prototype.webhookSecret = undefined;

module.exports = IoArgoprojEventsV1alpha1GithubEventSource;
