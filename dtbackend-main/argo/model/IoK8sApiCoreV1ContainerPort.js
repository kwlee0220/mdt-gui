/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1ContainerPort model module.
 * @module model/IoK8sApiCoreV1ContainerPort
 * @version VERSION
 */
class IoK8sApiCoreV1ContainerPort {
  /**
   * Constructs a new <code>IoK8sApiCoreV1ContainerPort</code>.
   * ContainerPort represents a network port in a single container.
   * @alias module:model/IoK8sApiCoreV1ContainerPort
   * @class
   * @param containerPort {Number} Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   */
  constructor(containerPort) {
    this.containerPort = containerPort;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1ContainerPort</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1ContainerPort} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1ContainerPort} The populated <code>IoK8sApiCoreV1ContainerPort</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1ContainerPort();
      if (data.hasOwnProperty('containerPort'))
        obj.containerPort = ApiClient.convertToType(data['containerPort'], 'Number');
      if (data.hasOwnProperty('hostIP'))
        obj.hostIP = ApiClient.convertToType(data['hostIP'], 'String');
      if (data.hasOwnProperty('hostPort'))
        obj.hostPort = ApiClient.convertToType(data['hostPort'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], 'String');
    }
    return obj;
  }
}

/**
 * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
 * @member {Number} containerPort
 */
IoK8sApiCoreV1ContainerPort.prototype.containerPort = undefined;

/**
 * What host IP to bind the external port to.
 * @member {String} hostIP
 */
IoK8sApiCoreV1ContainerPort.prototype.hostIP = undefined;

/**
 * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
 * @member {Number} hostPort
 */
IoK8sApiCoreV1ContainerPort.prototype.hostPort = undefined;

/**
 * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
 * @member {String} name
 */
IoK8sApiCoreV1ContainerPort.prototype.name = undefined;

/**
 * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".
 * @member {String} protocol
 */
IoK8sApiCoreV1ContainerPort.prototype.protocol = undefined;

module.exports = IoK8sApiCoreV1ContainerPort;
