/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1AzureDiskVolumeSource model module.
 * @module model/IoK8sApiCoreV1AzureDiskVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1AzureDiskVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1AzureDiskVolumeSource</code>.
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   * @alias module:model/IoK8sApiCoreV1AzureDiskVolumeSource
   * @class
   * @param diskName {String} diskName is the Name of the data disk in the blob storage
   * @param diskURI {String} diskURI is the URI of data disk in the blob storage
   */
  constructor(diskName, diskURI) {
    this.diskName = diskName;
    this.diskURI = diskURI;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1AzureDiskVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1AzureDiskVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1AzureDiskVolumeSource} The populated <code>IoK8sApiCoreV1AzureDiskVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1AzureDiskVolumeSource();
      if (data.hasOwnProperty('cachingMode'))
        obj.cachingMode = ApiClient.convertToType(data['cachingMode'], 'String');
      if (data.hasOwnProperty('diskName'))
        obj.diskName = ApiClient.convertToType(data['diskName'], 'String');
      if (data.hasOwnProperty('diskURI'))
        obj.diskURI = ApiClient.convertToType(data['diskURI'], 'String');
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
    }
    return obj;
  }
}

/**
 * cachingMode is the Host Caching mode: None, Read Only, Read Write.
 * @member {String} cachingMode
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.cachingMode = undefined;

/**
 * diskName is the Name of the data disk in the blob storage
 * @member {String} diskName
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.diskName = undefined;

/**
 * diskURI is the URI of data disk in the blob storage
 * @member {String} diskURI
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.diskURI = undefined;

/**
 * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.fsType = undefined;

/**
 * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
 * @member {String} kind
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.kind = undefined;

/**
 * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1AzureDiskVolumeSource.prototype.readOnly = undefined;

module.exports = IoK8sApiCoreV1AzureDiskVolumeSource;
