/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojEventsV1alpha1EventSourceFilter = require('./IoArgoprojEventsV1alpha1EventSourceFilter');
const IoArgoprojEventsV1alpha1WatchPathConfig = require('./IoArgoprojEventsV1alpha1WatchPathConfig');
const IoK8sApiCoreV1ConfigMapKeySelector = require('./IoK8sApiCoreV1ConfigMapKeySelector');
const IoK8sApiCoreV1SecretKeySelector = require('./IoK8sApiCoreV1SecretKeySelector');

/**
 * The IoArgoprojEventsV1alpha1HDFSEventSource model module.
 * @module model/IoArgoprojEventsV1alpha1HDFSEventSource
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1HDFSEventSource {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1HDFSEventSource</code>.
   * @alias module:model/IoArgoprojEventsV1alpha1HDFSEventSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1HDFSEventSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1HDFSEventSource} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1HDFSEventSource} The populated <code>IoArgoprojEventsV1alpha1HDFSEventSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1HDFSEventSource();
      if (data.hasOwnProperty('addresses'))
        obj.addresses = ApiClient.convertToType(data['addresses'], ['String']);
      if (data.hasOwnProperty('checkInterval'))
        obj.checkInterval = ApiClient.convertToType(data['checkInterval'], 'String');
      if (data.hasOwnProperty('filter'))
        obj.filter = IoArgoprojEventsV1alpha1EventSourceFilter.constructFromObject(data['filter']);
      if (data.hasOwnProperty('hdfsUser'))
        obj.hdfsUser = ApiClient.convertToType(data['hdfsUser'], 'String');
      if (data.hasOwnProperty('krbCCacheSecret'))
        obj.krbCCacheSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['krbCCacheSecret']);
      if (data.hasOwnProperty('krbConfigConfigMap'))
        obj.krbConfigConfigMap = IoK8sApiCoreV1ConfigMapKeySelector.constructFromObject(data['krbConfigConfigMap']);
      if (data.hasOwnProperty('krbKeytabSecret'))
        obj.krbKeytabSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['krbKeytabSecret']);
      if (data.hasOwnProperty('krbRealm'))
        obj.krbRealm = ApiClient.convertToType(data['krbRealm'], 'String');
      if (data.hasOwnProperty('krbServicePrincipalName'))
        obj.krbServicePrincipalName = ApiClient.convertToType(data['krbServicePrincipalName'], 'String');
      if (data.hasOwnProperty('krbUsername'))
        obj.krbUsername = ApiClient.convertToType(data['krbUsername'], 'String');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], {'String': 'String'});
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('watchPathConfig'))
        obj.watchPathConfig = IoArgoprojEventsV1alpha1WatchPathConfig.constructFromObject(data['watchPathConfig']);
    }
    return obj;
  }
}

/**
 * @member {Array.<String>} addresses
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.addresses = undefined;

/**
 * @member {String} checkInterval
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.checkInterval = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1EventSourceFilter} filter
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.filter = undefined;

/**
 * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
 * @member {String} hdfsUser
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.hdfsUser = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} krbCCacheSecret
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbCCacheSecret = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ConfigMapKeySelector} krbConfigConfigMap
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbConfigConfigMap = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} krbKeytabSecret
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbKeytabSecret = undefined;

/**
 * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
 * @member {String} krbRealm
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbRealm = undefined;

/**
 * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
 * @member {String} krbServicePrincipalName
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbServicePrincipalName = undefined;

/**
 * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
 * @member {String} krbUsername
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.krbUsername = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.metadata = undefined;

/**
 * @member {String} type
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.type = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1WatchPathConfig} watchPathConfig
 */
IoArgoprojEventsV1alpha1HDFSEventSource.prototype.watchPathConfig = undefined;

module.exports = IoArgoprojEventsV1alpha1HDFSEventSource;
