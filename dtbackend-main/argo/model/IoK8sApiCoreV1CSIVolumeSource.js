/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1CSIVolumeSource model module.
 * @module model/IoK8sApiCoreV1CSIVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1CSIVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1CSIVolumeSource</code>.
   * Represents a source location of a volume to mount, managed by an external CSI driver
   * @alias module:model/IoK8sApiCoreV1CSIVolumeSource
   * @class
   * @param driver {String} driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
   */
  constructor(driver) {
    this.driver = driver;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1CSIVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1CSIVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1CSIVolumeSource} The populated <code>IoK8sApiCoreV1CSIVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1CSIVolumeSource();
      if (data.hasOwnProperty('driver'))
        obj.driver = ApiClient.convertToType(data['driver'], 'String');
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('nodePublishSecretRef'))
        obj.nodePublishSecretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['nodePublishSecretRef']);
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('volumeAttributes'))
        obj.volumeAttributes = ApiClient.convertToType(data['volumeAttributes'], {'String': 'String'});
    }
    return obj;
  }
}

/**
 * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
 * @member {String} driver
 */
IoK8sApiCoreV1CSIVolumeSource.prototype.driver = undefined;

/**
 * fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
 * @member {String} fsType
 */
IoK8sApiCoreV1CSIVolumeSource.prototype.fsType = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} nodePublishSecretRef
 */
IoK8sApiCoreV1CSIVolumeSource.prototype.nodePublishSecretRef = undefined;

/**
 * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1CSIVolumeSource.prototype.readOnly = undefined;

/**
 * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
 * @member {Object.<String, String>} volumeAttributes
 */
IoK8sApiCoreV1CSIVolumeSource.prototype.volumeAttributes = undefined;

module.exports = IoK8sApiCoreV1CSIVolumeSource;
