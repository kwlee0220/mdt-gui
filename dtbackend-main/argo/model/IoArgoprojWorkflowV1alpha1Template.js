/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1ArtifactLocation = require('./IoArgoprojWorkflowV1alpha1ArtifactLocation');
const IoArgoprojWorkflowV1alpha1ContainerSetTemplate = require('./IoArgoprojWorkflowV1alpha1ContainerSetTemplate');
const IoArgoprojWorkflowV1alpha1DAGTemplate = require('./IoArgoprojWorkflowV1alpha1DAGTemplate');
const IoArgoprojWorkflowV1alpha1Data = require('./IoArgoprojWorkflowV1alpha1Data');
const IoArgoprojWorkflowV1alpha1ExecutorConfig = require('./IoArgoprojWorkflowV1alpha1ExecutorConfig');
const IoArgoprojWorkflowV1alpha1HTTP = require('./IoArgoprojWorkflowV1alpha1HTTP');
const IoArgoprojWorkflowV1alpha1Inputs = require('./IoArgoprojWorkflowV1alpha1Inputs');
const IoArgoprojWorkflowV1alpha1Memoize = require('./IoArgoprojWorkflowV1alpha1Memoize');
const IoArgoprojWorkflowV1alpha1Metadata = require('./IoArgoprojWorkflowV1alpha1Metadata');
const IoArgoprojWorkflowV1alpha1Metrics = require('./IoArgoprojWorkflowV1alpha1Metrics');
const IoArgoprojWorkflowV1alpha1Outputs = require('./IoArgoprojWorkflowV1alpha1Outputs');
const IoArgoprojWorkflowV1alpha1ParallelSteps = require('./IoArgoprojWorkflowV1alpha1ParallelSteps');
const IoArgoprojWorkflowV1alpha1Plugin = require('./IoArgoprojWorkflowV1alpha1Plugin');
const IoArgoprojWorkflowV1alpha1ResourceTemplate = require('./IoArgoprojWorkflowV1alpha1ResourceTemplate');
const IoArgoprojWorkflowV1alpha1RetryStrategy = require('./IoArgoprojWorkflowV1alpha1RetryStrategy');
const IoArgoprojWorkflowV1alpha1ScriptTemplate = require('./IoArgoprojWorkflowV1alpha1ScriptTemplate');
const IoArgoprojWorkflowV1alpha1SuspendTemplate = require('./IoArgoprojWorkflowV1alpha1SuspendTemplate');
const IoArgoprojWorkflowV1alpha1Synchronization = require('./IoArgoprojWorkflowV1alpha1Synchronization');
const IoArgoprojWorkflowV1alpha1UserContainer = require('./IoArgoprojWorkflowV1alpha1UserContainer');
const IoK8sApiCoreV1Affinity = require('./IoK8sApiCoreV1Affinity');
const IoK8sApiCoreV1Container = require('./IoK8sApiCoreV1Container');
const IoK8sApiCoreV1HostAlias = require('./IoK8sApiCoreV1HostAlias');
const IoK8sApiCoreV1PodSecurityContext = require('./IoK8sApiCoreV1PodSecurityContext');
const IoK8sApiCoreV1Toleration = require('./IoK8sApiCoreV1Toleration');
const IoK8sApiCoreV1Volume = require('./IoK8sApiCoreV1Volume');
const IoK8sApimachineryPkgUtilIntstrIntOrString = require('./IoK8sApimachineryPkgUtilIntstrIntOrString');

/**
 * The IoArgoprojWorkflowV1alpha1Template model module.
 * @module model/IoArgoprojWorkflowV1alpha1Template
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1Template {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1Template</code>.
   * Template is a reusable and composable unit of execution in a workflow
   * @alias module:model/IoArgoprojWorkflowV1alpha1Template
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1Template</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1Template} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1Template} The populated <code>IoArgoprojWorkflowV1alpha1Template</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1Template();
      if (data.hasOwnProperty('activeDeadlineSeconds'))
        obj.activeDeadlineSeconds = IoK8sApimachineryPkgUtilIntstrIntOrString.constructFromObject(data['activeDeadlineSeconds']);
      if (data.hasOwnProperty('affinity'))
        obj.affinity = IoK8sApiCoreV1Affinity.constructFromObject(data['affinity']);
      if (data.hasOwnProperty('archiveLocation'))
        obj.archiveLocation = IoArgoprojWorkflowV1alpha1ArtifactLocation.constructFromObject(data['archiveLocation']);
      if (data.hasOwnProperty('automountServiceAccountToken'))
        obj.automountServiceAccountToken = ApiClient.convertToType(data['automountServiceAccountToken'], 'Boolean');
      if (data.hasOwnProperty('container'))
        obj.container = IoK8sApiCoreV1Container.constructFromObject(data['container']);
      if (data.hasOwnProperty('containerSet'))
        obj.containerSet = IoArgoprojWorkflowV1alpha1ContainerSetTemplate.constructFromObject(data['containerSet']);
      if (data.hasOwnProperty('daemon'))
        obj.daemon = ApiClient.convertToType(data['daemon'], 'Boolean');
      if (data.hasOwnProperty('dag'))
        obj.dag = IoArgoprojWorkflowV1alpha1DAGTemplate.constructFromObject(data['dag']);
      if (data.hasOwnProperty('data'))
        obj.data = IoArgoprojWorkflowV1alpha1Data.constructFromObject(data['data']);
      if (data.hasOwnProperty('executor'))
        obj.executor = IoArgoprojWorkflowV1alpha1ExecutorConfig.constructFromObject(data['executor']);
      if (data.hasOwnProperty('failFast'))
        obj.failFast = ApiClient.convertToType(data['failFast'], 'Boolean');
      if (data.hasOwnProperty('hostAliases'))
        obj.hostAliases = ApiClient.convertToType(data['hostAliases'], [IoK8sApiCoreV1HostAlias]);
      if (data.hasOwnProperty('http'))
        obj.http = IoArgoprojWorkflowV1alpha1HTTP.constructFromObject(data['http']);
      if (data.hasOwnProperty('initContainers'))
        obj.initContainers = ApiClient.convertToType(data['initContainers'], [IoArgoprojWorkflowV1alpha1UserContainer]);
      if (data.hasOwnProperty('inputs'))
        obj.inputs = IoArgoprojWorkflowV1alpha1Inputs.constructFromObject(data['inputs']);
      if (data.hasOwnProperty('memoize'))
        obj.memoize = IoArgoprojWorkflowV1alpha1Memoize.constructFromObject(data['memoize']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = IoArgoprojWorkflowV1alpha1Metadata.constructFromObject(data['metadata']);
      if (data.hasOwnProperty('metrics'))
        obj.metrics = IoArgoprojWorkflowV1alpha1Metrics.constructFromObject(data['metrics']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('nodeSelector'))
        obj.nodeSelector = ApiClient.convertToType(data['nodeSelector'], {'String': 'String'});
      if (data.hasOwnProperty('outputs'))
        obj.outputs = IoArgoprojWorkflowV1alpha1Outputs.constructFromObject(data['outputs']);
      if (data.hasOwnProperty('parallelism'))
        obj.parallelism = ApiClient.convertToType(data['parallelism'], 'Number');
      if (data.hasOwnProperty('plugin'))
        obj.plugin = IoArgoprojWorkflowV1alpha1Plugin.constructFromObject(data['plugin']);
      if (data.hasOwnProperty('podSpecPatch'))
        obj.podSpecPatch = ApiClient.convertToType(data['podSpecPatch'], 'String');
      if (data.hasOwnProperty('priority'))
        obj.priority = ApiClient.convertToType(data['priority'], 'Number');
      if (data.hasOwnProperty('priorityClassName'))
        obj.priorityClassName = ApiClient.convertToType(data['priorityClassName'], 'String');
      if (data.hasOwnProperty('resource'))
        obj.resource = IoArgoprojWorkflowV1alpha1ResourceTemplate.constructFromObject(data['resource']);
      if (data.hasOwnProperty('retryStrategy'))
        obj.retryStrategy = IoArgoprojWorkflowV1alpha1RetryStrategy.constructFromObject(data['retryStrategy']);
      if (data.hasOwnProperty('schedulerName'))
        obj.schedulerName = ApiClient.convertToType(data['schedulerName'], 'String');
      if (data.hasOwnProperty('script'))
        obj.script = IoArgoprojWorkflowV1alpha1ScriptTemplate.constructFromObject(data['script']);
      if (data.hasOwnProperty('securityContext'))
        obj.securityContext = IoK8sApiCoreV1PodSecurityContext.constructFromObject(data['securityContext']);
      if (data.hasOwnProperty('serviceAccountName'))
        obj.serviceAccountName = ApiClient.convertToType(data['serviceAccountName'], 'String');
      if (data.hasOwnProperty('sidecars'))
        obj.sidecars = ApiClient.convertToType(data['sidecars'], [IoArgoprojWorkflowV1alpha1UserContainer]);
      if (data.hasOwnProperty('steps'))
        obj.steps = ApiClient.convertToType(data['steps'], [IoArgoprojWorkflowV1alpha1ParallelSteps]);
      if (data.hasOwnProperty('suspend'))
        obj.suspend = IoArgoprojWorkflowV1alpha1SuspendTemplate.constructFromObject(data['suspend']);
      if (data.hasOwnProperty('synchronization'))
        obj.synchronization = IoArgoprojWorkflowV1alpha1Synchronization.constructFromObject(data['synchronization']);
      if (data.hasOwnProperty('timeout'))
        obj.timeout = ApiClient.convertToType(data['timeout'], 'String');
      if (data.hasOwnProperty('tolerations'))
        obj.tolerations = ApiClient.convertToType(data['tolerations'], [IoK8sApiCoreV1Toleration]);
      if (data.hasOwnProperty('volumes'))
        obj.volumes = ApiClient.convertToType(data['volumes'], [IoK8sApiCoreV1Volume]);
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} activeDeadlineSeconds
 */
IoArgoprojWorkflowV1alpha1Template.prototype.activeDeadlineSeconds = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1Affinity} affinity
 */
IoArgoprojWorkflowV1alpha1Template.prototype.affinity = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtifactLocation} archiveLocation
 */
IoArgoprojWorkflowV1alpha1Template.prototype.archiveLocation = undefined;

/**
 * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.
 * @member {Boolean} automountServiceAccountToken
 */
IoArgoprojWorkflowV1alpha1Template.prototype.automountServiceAccountToken = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1Container} container
 */
IoArgoprojWorkflowV1alpha1Template.prototype.container = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ContainerSetTemplate} containerSet
 */
IoArgoprojWorkflowV1alpha1Template.prototype.containerSet = undefined;

/**
 * Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness
 * @member {Boolean} daemon
 */
IoArgoprojWorkflowV1alpha1Template.prototype.daemon = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1DAGTemplate} dag
 */
IoArgoprojWorkflowV1alpha1Template.prototype.dag = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Data} data
 */
IoArgoprojWorkflowV1alpha1Template.prototype.data = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ExecutorConfig} executor
 */
IoArgoprojWorkflowV1alpha1Template.prototype.executor = undefined;

/**
 * FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this template is expanded with `withItems`, etc.
 * @member {Boolean} failFast
 */
IoArgoprojWorkflowV1alpha1Template.prototype.failFast = undefined;

/**
 * HostAliases is an optional list of hosts and IPs that will be injected into the pod spec
 * @member {Array.<module:model/IoK8sApiCoreV1HostAlias>} hostAliases
 */
IoArgoprojWorkflowV1alpha1Template.prototype.hostAliases = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1HTTP} http
 */
IoArgoprojWorkflowV1alpha1Template.prototype.http = undefined;

/**
 * InitContainers is a list of containers which run before the main container.
 * @member {Array.<module:model/IoArgoprojWorkflowV1alpha1UserContainer>} initContainers
 */
IoArgoprojWorkflowV1alpha1Template.prototype.initContainers = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Inputs} inputs
 */
IoArgoprojWorkflowV1alpha1Template.prototype.inputs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Memoize} memoize
 */
IoArgoprojWorkflowV1alpha1Template.prototype.memoize = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Metadata} metadata
 */
IoArgoprojWorkflowV1alpha1Template.prototype.metadata = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Metrics} metrics
 */
IoArgoprojWorkflowV1alpha1Template.prototype.metrics = undefined;

/**
 * Name is the name of the template
 * @member {String} name
 */
IoArgoprojWorkflowV1alpha1Template.prototype.name = undefined;

/**
 * NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.
 * @member {Object.<String, String>} nodeSelector
 */
IoArgoprojWorkflowV1alpha1Template.prototype.nodeSelector = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Outputs} outputs
 */
IoArgoprojWorkflowV1alpha1Template.prototype.outputs = undefined;

/**
 * Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.
 * @member {Number} parallelism
 */
IoArgoprojWorkflowV1alpha1Template.prototype.parallelism = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Plugin} plugin
 */
IoArgoprojWorkflowV1alpha1Template.prototype.plugin = undefined;

/**
 * PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).
 * @member {String} podSpecPatch
 */
IoArgoprojWorkflowV1alpha1Template.prototype.podSpecPatch = undefined;

/**
 * Priority to apply to workflow pods.
 * @member {Number} priority
 */
IoArgoprojWorkflowV1alpha1Template.prototype.priority = undefined;

/**
 * PriorityClassName to apply to workflow pods.
 * @member {String} priorityClassName
 */
IoArgoprojWorkflowV1alpha1Template.prototype.priorityClassName = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ResourceTemplate} resource
 */
IoArgoprojWorkflowV1alpha1Template.prototype.resource = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1RetryStrategy} retryStrategy
 */
IoArgoprojWorkflowV1alpha1Template.prototype.retryStrategy = undefined;

/**
 * If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.
 * @member {String} schedulerName
 */
IoArgoprojWorkflowV1alpha1Template.prototype.schedulerName = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ScriptTemplate} script
 */
IoArgoprojWorkflowV1alpha1Template.prototype.script = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1PodSecurityContext} securityContext
 */
IoArgoprojWorkflowV1alpha1Template.prototype.securityContext = undefined;

/**
 * ServiceAccountName to apply to workflow pods
 * @member {String} serviceAccountName
 */
IoArgoprojWorkflowV1alpha1Template.prototype.serviceAccountName = undefined;

/**
 * Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes
 * @member {Array.<module:model/IoArgoprojWorkflowV1alpha1UserContainer>} sidecars
 */
IoArgoprojWorkflowV1alpha1Template.prototype.sidecars = undefined;

/**
 * Steps define a series of sequential/parallel workflow steps
 * @member {Array.<module:model/IoArgoprojWorkflowV1alpha1ParallelSteps>} steps
 */
IoArgoprojWorkflowV1alpha1Template.prototype.steps = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1SuspendTemplate} suspend
 */
IoArgoprojWorkflowV1alpha1Template.prototype.suspend = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Synchronization} synchronization
 */
IoArgoprojWorkflowV1alpha1Template.prototype.synchronization = undefined;

/**
 * Timeout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.
 * @member {String} timeout
 */
IoArgoprojWorkflowV1alpha1Template.prototype.timeout = undefined;

/**
 * Tolerations to apply to workflow pods.
 * @member {Array.<module:model/IoK8sApiCoreV1Toleration>} tolerations
 */
IoArgoprojWorkflowV1alpha1Template.prototype.tolerations = undefined;

/**
 * Volumes is a list of volumes that can be mounted by containers in a template.
 * @member {Array.<module:model/IoK8sApiCoreV1Volume>} volumes
 */
IoArgoprojWorkflowV1alpha1Template.prototype.volumes = undefined;

module.exports = IoArgoprojWorkflowV1alpha1Template;
