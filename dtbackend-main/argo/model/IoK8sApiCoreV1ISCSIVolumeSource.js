/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1ISCSIVolumeSource model module.
 * @module model/IoK8sApiCoreV1ISCSIVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1ISCSIVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1ISCSIVolumeSource</code>.
   * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1ISCSIVolumeSource
   * @class
   * @param iqn {String} iqn is the target iSCSI Qualified Name.
   * @param lun {Number} lun represents iSCSI Target Lun number.
   * @param targetPortal {String} targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
   */
  constructor(iqn, lun, targetPortal) {
    this.iqn = iqn;
    this.lun = lun;
    this.targetPortal = targetPortal;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1ISCSIVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1ISCSIVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1ISCSIVolumeSource} The populated <code>IoK8sApiCoreV1ISCSIVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1ISCSIVolumeSource();
      if (data.hasOwnProperty('chapAuthDiscovery'))
        obj.chapAuthDiscovery = ApiClient.convertToType(data['chapAuthDiscovery'], 'Boolean');
      if (data.hasOwnProperty('chapAuthSession'))
        obj.chapAuthSession = ApiClient.convertToType(data['chapAuthSession'], 'Boolean');
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('initiatorName'))
        obj.initiatorName = ApiClient.convertToType(data['initiatorName'], 'String');
      if (data.hasOwnProperty('iqn'))
        obj.iqn = ApiClient.convertToType(data['iqn'], 'String');
      if (data.hasOwnProperty('iscsiInterface'))
        obj.iscsiInterface = ApiClient.convertToType(data['iscsiInterface'], 'String');
      if (data.hasOwnProperty('lun'))
        obj.lun = ApiClient.convertToType(data['lun'], 'Number');
      if (data.hasOwnProperty('portals'))
        obj.portals = ApiClient.convertToType(data['portals'], ['String']);
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('secretRef'))
        obj.secretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['secretRef']);
      if (data.hasOwnProperty('targetPortal'))
        obj.targetPortal = ApiClient.convertToType(data['targetPortal'], 'String');
    }
    return obj;
  }
}

/**
 * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
 * @member {Boolean} chapAuthDiscovery
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.chapAuthDiscovery = undefined;

/**
 * chapAuthSession defines whether support iSCSI Session CHAP authentication
 * @member {Boolean} chapAuthSession
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.chapAuthSession = undefined;

/**
 * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
 * @member {String} fsType
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.fsType = undefined;

/**
 * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
 * @member {String} initiatorName
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.initiatorName = undefined;

/**
 * iqn is the target iSCSI Qualified Name.
 * @member {String} iqn
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.iqn = undefined;

/**
 * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
 * @member {String} iscsiInterface
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.iscsiInterface = undefined;

/**
 * lun represents iSCSI Target Lun number.
 * @member {Number} lun
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.lun = undefined;

/**
 * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
 * @member {Array.<String>} portals
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.portals = undefined;

/**
 * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.readOnly = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} secretRef
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.secretRef = undefined;

/**
 * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
 * @member {String} targetPortal
 */
IoK8sApiCoreV1ISCSIVolumeSource.prototype.targetPortal = undefined;

module.exports = IoK8sApiCoreV1ISCSIVolumeSource;
