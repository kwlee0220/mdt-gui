/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1RBDVolumeSource model module.
 * @module model/IoK8sApiCoreV1RBDVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1RBDVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1RBDVolumeSource</code>.
   * Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1RBDVolumeSource
   * @class
   * @param image {String} image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @param monitors {Array.<String>} monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   */
  constructor(image, monitors) {
    this.image = image;
    this.monitors = monitors;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1RBDVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1RBDVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1RBDVolumeSource} The populated <code>IoK8sApiCoreV1RBDVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1RBDVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('image'))
        obj.image = ApiClient.convertToType(data['image'], 'String');
      if (data.hasOwnProperty('keyring'))
        obj.keyring = ApiClient.convertToType(data['keyring'], 'String');
      if (data.hasOwnProperty('monitors'))
        obj.monitors = ApiClient.convertToType(data['monitors'], ['String']);
      if (data.hasOwnProperty('pool'))
        obj.pool = ApiClient.convertToType(data['pool'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('secretRef'))
        obj.secretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['secretRef']);
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], 'String');
    }
    return obj;
  }
}

/**
 * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
 * @member {String} fsType
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.fsType = undefined;

/**
 * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {String} image
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.image = undefined;

/**
 * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {String} keyring
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.keyring = undefined;

/**
 * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {Array.<String>} monitors
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.monitors = undefined;

/**
 * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {String} pool
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.pool = undefined;

/**
 * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.readOnly = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} secretRef
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.secretRef = undefined;

/**
 * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @member {String} user
 */
IoK8sApiCoreV1RBDVolumeSource.prototype.user = undefined;

module.exports = IoK8sApiCoreV1RBDVolumeSource;
