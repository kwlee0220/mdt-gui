/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApimachineryPkgUtilIntstrIntOrString = require('./IoK8sApimachineryPkgUtilIntstrIntOrString');

/**
 * The IoK8sApiCoreV1ServicePort model module.
 * @module model/IoK8sApiCoreV1ServicePort
 * @version VERSION
 */
class IoK8sApiCoreV1ServicePort {
  /**
   * Constructs a new <code>IoK8sApiCoreV1ServicePort</code>.
   * ServicePort contains information on service&#x27;s port.
   * @alias module:model/IoK8sApiCoreV1ServicePort
   * @class
   * @param port {Number} The port that will be exposed by this service.
   */
  constructor(port) {
    this.port = port;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1ServicePort</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1ServicePort} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1ServicePort} The populated <code>IoK8sApiCoreV1ServicePort</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1ServicePort();
      if (data.hasOwnProperty('appProtocol'))
        obj.appProtocol = ApiClient.convertToType(data['appProtocol'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('nodePort'))
        obj.nodePort = ApiClient.convertToType(data['nodePort'], 'Number');
      if (data.hasOwnProperty('port'))
        obj.port = ApiClient.convertToType(data['port'], 'Number');
      if (data.hasOwnProperty('protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], 'String');
      if (data.hasOwnProperty('targetPort'))
        obj.targetPort = IoK8sApimachineryPkgUtilIntstrIntOrString.constructFromObject(data['targetPort']);
    }
    return obj;
  }
}

/**
 * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:  * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).  * Kubernetes-defined prefixed names:   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455  * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.
 * @member {String} appProtocol
 */
IoK8sApiCoreV1ServicePort.prototype.appProtocol = undefined;

/**
 * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
 * @member {String} name
 */
IoK8sApiCoreV1ServicePort.prototype.name = undefined;

/**
 * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
 * @member {Number} nodePort
 */
IoK8sApiCoreV1ServicePort.prototype.nodePort = undefined;

/**
 * The port that will be exposed by this service.
 * @member {Number} port
 */
IoK8sApiCoreV1ServicePort.prototype.port = undefined;

/**
 * The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.
 * @member {String} protocol
 */
IoK8sApiCoreV1ServicePort.prototype.protocol = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} targetPort
 */
IoK8sApiCoreV1ServicePort.prototype.targetPort = undefined;

module.exports = IoK8sApiCoreV1ServicePort;
