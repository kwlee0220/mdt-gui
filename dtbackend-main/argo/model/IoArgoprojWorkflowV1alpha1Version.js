/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoArgoprojWorkflowV1alpha1Version model module.
 * @module model/IoArgoprojWorkflowV1alpha1Version
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1Version {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1Version</code>.
   * @alias module:model/IoArgoprojWorkflowV1alpha1Version
   * @class
   * @param buildDate {String} 
   * @param compiler {String} 
   * @param gitCommit {String} 
   * @param gitTag {String} 
   * @param gitTreeState {String} 
   * @param goVersion {String} 
   * @param platform {String} 
   * @param version {String} 
   */
  constructor(buildDate, compiler, gitCommit, gitTag, gitTreeState, goVersion, platform, version) {
    this.buildDate = buildDate;
    this.compiler = compiler;
    this.gitCommit = gitCommit;
    this.gitTag = gitTag;
    this.gitTreeState = gitTreeState;
    this.goVersion = goVersion;
    this.platform = platform;
    this.version = version;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1Version</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1Version} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1Version} The populated <code>IoArgoprojWorkflowV1alpha1Version</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1Version();
      if (data.hasOwnProperty('buildDate'))
        obj.buildDate = ApiClient.convertToType(data['buildDate'], 'String');
      if (data.hasOwnProperty('compiler'))
        obj.compiler = ApiClient.convertToType(data['compiler'], 'String');
      if (data.hasOwnProperty('gitCommit'))
        obj.gitCommit = ApiClient.convertToType(data['gitCommit'], 'String');
      if (data.hasOwnProperty('gitTag'))
        obj.gitTag = ApiClient.convertToType(data['gitTag'], 'String');
      if (data.hasOwnProperty('gitTreeState'))
        obj.gitTreeState = ApiClient.convertToType(data['gitTreeState'], 'String');
      if (data.hasOwnProperty('goVersion'))
        obj.goVersion = ApiClient.convertToType(data['goVersion'], 'String');
      if (data.hasOwnProperty('platform'))
        obj.platform = ApiClient.convertToType(data['platform'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} buildDate
 */
IoArgoprojWorkflowV1alpha1Version.prototype.buildDate = undefined;

/**
 * @member {String} compiler
 */
IoArgoprojWorkflowV1alpha1Version.prototype.compiler = undefined;

/**
 * @member {String} gitCommit
 */
IoArgoprojWorkflowV1alpha1Version.prototype.gitCommit = undefined;

/**
 * @member {String} gitTag
 */
IoArgoprojWorkflowV1alpha1Version.prototype.gitTag = undefined;

/**
 * @member {String} gitTreeState
 */
IoArgoprojWorkflowV1alpha1Version.prototype.gitTreeState = undefined;

/**
 * @member {String} goVersion
 */
IoArgoprojWorkflowV1alpha1Version.prototype.goVersion = undefined;

/**
 * @member {String} platform
 */
IoArgoprojWorkflowV1alpha1Version.prototype.platform = undefined;

/**
 * @member {String} version
 */
IoArgoprojWorkflowV1alpha1Version.prototype.version = undefined;

module.exports = IoArgoprojWorkflowV1alpha1Version;
