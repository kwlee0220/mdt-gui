/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource = require('./IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource');
const IoK8sApiCoreV1AzureDiskVolumeSource = require('./IoK8sApiCoreV1AzureDiskVolumeSource');
const IoK8sApiCoreV1AzureFileVolumeSource = require('./IoK8sApiCoreV1AzureFileVolumeSource');
const IoK8sApiCoreV1CSIVolumeSource = require('./IoK8sApiCoreV1CSIVolumeSource');
const IoK8sApiCoreV1CephFSVolumeSource = require('./IoK8sApiCoreV1CephFSVolumeSource');
const IoK8sApiCoreV1CinderVolumeSource = require('./IoK8sApiCoreV1CinderVolumeSource');
const IoK8sApiCoreV1ConfigMapVolumeSource = require('./IoK8sApiCoreV1ConfigMapVolumeSource');
const IoK8sApiCoreV1DownwardAPIVolumeSource = require('./IoK8sApiCoreV1DownwardAPIVolumeSource');
const IoK8sApiCoreV1EmptyDirVolumeSource = require('./IoK8sApiCoreV1EmptyDirVolumeSource');
const IoK8sApiCoreV1EphemeralVolumeSource = require('./IoK8sApiCoreV1EphemeralVolumeSource');
const IoK8sApiCoreV1FCVolumeSource = require('./IoK8sApiCoreV1FCVolumeSource');
const IoK8sApiCoreV1FlexVolumeSource = require('./IoK8sApiCoreV1FlexVolumeSource');
const IoK8sApiCoreV1FlockerVolumeSource = require('./IoK8sApiCoreV1FlockerVolumeSource');
const IoK8sApiCoreV1GCEPersistentDiskVolumeSource = require('./IoK8sApiCoreV1GCEPersistentDiskVolumeSource');
const IoK8sApiCoreV1GitRepoVolumeSource = require('./IoK8sApiCoreV1GitRepoVolumeSource');
const IoK8sApiCoreV1GlusterfsVolumeSource = require('./IoK8sApiCoreV1GlusterfsVolumeSource');
const IoK8sApiCoreV1HostPathVolumeSource = require('./IoK8sApiCoreV1HostPathVolumeSource');
const IoK8sApiCoreV1ISCSIVolumeSource = require('./IoK8sApiCoreV1ISCSIVolumeSource');
const IoK8sApiCoreV1ImageVolumeSource = require('./IoK8sApiCoreV1ImageVolumeSource');
const IoK8sApiCoreV1NFSVolumeSource = require('./IoK8sApiCoreV1NFSVolumeSource');
const IoK8sApiCoreV1PersistentVolumeClaimVolumeSource = require('./IoK8sApiCoreV1PersistentVolumeClaimVolumeSource');
const IoK8sApiCoreV1PhotonPersistentDiskVolumeSource = require('./IoK8sApiCoreV1PhotonPersistentDiskVolumeSource');
const IoK8sApiCoreV1PortworxVolumeSource = require('./IoK8sApiCoreV1PortworxVolumeSource');
const IoK8sApiCoreV1ProjectedVolumeSource = require('./IoK8sApiCoreV1ProjectedVolumeSource');
const IoK8sApiCoreV1QuobyteVolumeSource = require('./IoK8sApiCoreV1QuobyteVolumeSource');
const IoK8sApiCoreV1RBDVolumeSource = require('./IoK8sApiCoreV1RBDVolumeSource');
const IoK8sApiCoreV1ScaleIOVolumeSource = require('./IoK8sApiCoreV1ScaleIOVolumeSource');
const IoK8sApiCoreV1SecretVolumeSource = require('./IoK8sApiCoreV1SecretVolumeSource');
const IoK8sApiCoreV1StorageOSVolumeSource = require('./IoK8sApiCoreV1StorageOSVolumeSource');
const IoK8sApiCoreV1VsphereVirtualDiskVolumeSource = require('./IoK8sApiCoreV1VsphereVirtualDiskVolumeSource');

/**
 * The IoK8sApiCoreV1Volume model module.
 * @module model/IoK8sApiCoreV1Volume
 * @version VERSION
 */
class IoK8sApiCoreV1Volume {
  /**
   * Constructs a new <code>IoK8sApiCoreV1Volume</code>.
   * Volume represents a named volume in a pod that may be accessed by any container in the pod.
   * @alias module:model/IoK8sApiCoreV1Volume
   * @class
   * @param name {String} name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   */
  constructor(name) {
    this.name = name;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1Volume</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1Volume} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1Volume} The populated <code>IoK8sApiCoreV1Volume</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1Volume();
      if (data.hasOwnProperty('awsElasticBlockStore'))
        obj.awsElasticBlockStore = IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.constructFromObject(data['awsElasticBlockStore']);
      if (data.hasOwnProperty('azureDisk'))
        obj.azureDisk = IoK8sApiCoreV1AzureDiskVolumeSource.constructFromObject(data['azureDisk']);
      if (data.hasOwnProperty('azureFile'))
        obj.azureFile = IoK8sApiCoreV1AzureFileVolumeSource.constructFromObject(data['azureFile']);
      if (data.hasOwnProperty('cephfs'))
        obj.cephfs = IoK8sApiCoreV1CephFSVolumeSource.constructFromObject(data['cephfs']);
      if (data.hasOwnProperty('cinder'))
        obj.cinder = IoK8sApiCoreV1CinderVolumeSource.constructFromObject(data['cinder']);
      if (data.hasOwnProperty('configMap'))
        obj.configMap = IoK8sApiCoreV1ConfigMapVolumeSource.constructFromObject(data['configMap']);
      if (data.hasOwnProperty('csi'))
        obj.csi = IoK8sApiCoreV1CSIVolumeSource.constructFromObject(data['csi']);
      if (data.hasOwnProperty('downwardAPI'))
        obj.downwardAPI = IoK8sApiCoreV1DownwardAPIVolumeSource.constructFromObject(data['downwardAPI']);
      if (data.hasOwnProperty('emptyDir'))
        obj.emptyDir = IoK8sApiCoreV1EmptyDirVolumeSource.constructFromObject(data['emptyDir']);
      if (data.hasOwnProperty('ephemeral'))
        obj.ephemeral = IoK8sApiCoreV1EphemeralVolumeSource.constructFromObject(data['ephemeral']);
      if (data.hasOwnProperty('fc'))
        obj.fc = IoK8sApiCoreV1FCVolumeSource.constructFromObject(data['fc']);
      if (data.hasOwnProperty('flexVolume'))
        obj.flexVolume = IoK8sApiCoreV1FlexVolumeSource.constructFromObject(data['flexVolume']);
      if (data.hasOwnProperty('flocker'))
        obj.flocker = IoK8sApiCoreV1FlockerVolumeSource.constructFromObject(data['flocker']);
      if (data.hasOwnProperty('gcePersistentDisk'))
        obj.gcePersistentDisk = IoK8sApiCoreV1GCEPersistentDiskVolumeSource.constructFromObject(data['gcePersistentDisk']);
      if (data.hasOwnProperty('gitRepo'))
        obj.gitRepo = IoK8sApiCoreV1GitRepoVolumeSource.constructFromObject(data['gitRepo']);
      if (data.hasOwnProperty('glusterfs'))
        obj.glusterfs = IoK8sApiCoreV1GlusterfsVolumeSource.constructFromObject(data['glusterfs']);
      if (data.hasOwnProperty('hostPath'))
        obj.hostPath = IoK8sApiCoreV1HostPathVolumeSource.constructFromObject(data['hostPath']);
      if (data.hasOwnProperty('image'))
        obj.image = IoK8sApiCoreV1ImageVolumeSource.constructFromObject(data['image']);
      if (data.hasOwnProperty('iscsi'))
        obj.iscsi = IoK8sApiCoreV1ISCSIVolumeSource.constructFromObject(data['iscsi']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('nfs'))
        obj.nfs = IoK8sApiCoreV1NFSVolumeSource.constructFromObject(data['nfs']);
      if (data.hasOwnProperty('persistentVolumeClaim'))
        obj.persistentVolumeClaim = IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.constructFromObject(data['persistentVolumeClaim']);
      if (data.hasOwnProperty('photonPersistentDisk'))
        obj.photonPersistentDisk = IoK8sApiCoreV1PhotonPersistentDiskVolumeSource.constructFromObject(data['photonPersistentDisk']);
      if (data.hasOwnProperty('portworxVolume'))
        obj.portworxVolume = IoK8sApiCoreV1PortworxVolumeSource.constructFromObject(data['portworxVolume']);
      if (data.hasOwnProperty('projected'))
        obj.projected = IoK8sApiCoreV1ProjectedVolumeSource.constructFromObject(data['projected']);
      if (data.hasOwnProperty('quobyte'))
        obj.quobyte = IoK8sApiCoreV1QuobyteVolumeSource.constructFromObject(data['quobyte']);
      if (data.hasOwnProperty('rbd'))
        obj.rbd = IoK8sApiCoreV1RBDVolumeSource.constructFromObject(data['rbd']);
      if (data.hasOwnProperty('scaleIO'))
        obj.scaleIO = IoK8sApiCoreV1ScaleIOVolumeSource.constructFromObject(data['scaleIO']);
      if (data.hasOwnProperty('secret'))
        obj.secret = IoK8sApiCoreV1SecretVolumeSource.constructFromObject(data['secret']);
      if (data.hasOwnProperty('storageos'))
        obj.storageos = IoK8sApiCoreV1StorageOSVolumeSource.constructFromObject(data['storageos']);
      if (data.hasOwnProperty('vsphereVolume'))
        obj.vsphereVolume = IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.constructFromObject(data['vsphereVolume']);
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource} awsElasticBlockStore
 */
IoK8sApiCoreV1Volume.prototype.awsElasticBlockStore = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1AzureDiskVolumeSource} azureDisk
 */
IoK8sApiCoreV1Volume.prototype.azureDisk = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1AzureFileVolumeSource} azureFile
 */
IoK8sApiCoreV1Volume.prototype.azureFile = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1CephFSVolumeSource} cephfs
 */
IoK8sApiCoreV1Volume.prototype.cephfs = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1CinderVolumeSource} cinder
 */
IoK8sApiCoreV1Volume.prototype.cinder = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ConfigMapVolumeSource} configMap
 */
IoK8sApiCoreV1Volume.prototype.configMap = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1CSIVolumeSource} csi
 */
IoK8sApiCoreV1Volume.prototype.csi = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1DownwardAPIVolumeSource} downwardAPI
 */
IoK8sApiCoreV1Volume.prototype.downwardAPI = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1EmptyDirVolumeSource} emptyDir
 */
IoK8sApiCoreV1Volume.prototype.emptyDir = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1EphemeralVolumeSource} ephemeral
 */
IoK8sApiCoreV1Volume.prototype.ephemeral = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1FCVolumeSource} fc
 */
IoK8sApiCoreV1Volume.prototype.fc = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1FlexVolumeSource} flexVolume
 */
IoK8sApiCoreV1Volume.prototype.flexVolume = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1FlockerVolumeSource} flocker
 */
IoK8sApiCoreV1Volume.prototype.flocker = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1GCEPersistentDiskVolumeSource} gcePersistentDisk
 */
IoK8sApiCoreV1Volume.prototype.gcePersistentDisk = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1GitRepoVolumeSource} gitRepo
 */
IoK8sApiCoreV1Volume.prototype.gitRepo = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1GlusterfsVolumeSource} glusterfs
 */
IoK8sApiCoreV1Volume.prototype.glusterfs = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1HostPathVolumeSource} hostPath
 */
IoK8sApiCoreV1Volume.prototype.hostPath = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ImageVolumeSource} image
 */
IoK8sApiCoreV1Volume.prototype.image = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ISCSIVolumeSource} iscsi
 */
IoK8sApiCoreV1Volume.prototype.iscsi = undefined;

/**
 * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
 * @member {String} name
 */
IoK8sApiCoreV1Volume.prototype.name = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1NFSVolumeSource} nfs
 */
IoK8sApiCoreV1Volume.prototype.nfs = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1PersistentVolumeClaimVolumeSource} persistentVolumeClaim
 */
IoK8sApiCoreV1Volume.prototype.persistentVolumeClaim = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1PhotonPersistentDiskVolumeSource} photonPersistentDisk
 */
IoK8sApiCoreV1Volume.prototype.photonPersistentDisk = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1PortworxVolumeSource} portworxVolume
 */
IoK8sApiCoreV1Volume.prototype.portworxVolume = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ProjectedVolumeSource} projected
 */
IoK8sApiCoreV1Volume.prototype.projected = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1QuobyteVolumeSource} quobyte
 */
IoK8sApiCoreV1Volume.prototype.quobyte = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1RBDVolumeSource} rbd
 */
IoK8sApiCoreV1Volume.prototype.rbd = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ScaleIOVolumeSource} scaleIO
 */
IoK8sApiCoreV1Volume.prototype.scaleIO = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretVolumeSource} secret
 */
IoK8sApiCoreV1Volume.prototype.secret = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1StorageOSVolumeSource} storageos
 */
IoK8sApiCoreV1Volume.prototype.storageos = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1VsphereVirtualDiskVolumeSource} vsphereVolume
 */
IoK8sApiCoreV1Volume.prototype.vsphereVolume = undefined;

module.exports = IoK8sApiCoreV1Volume;
