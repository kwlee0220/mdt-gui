/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1EventSeries = require('./IoK8sApiCoreV1EventSeries');
const IoK8sApiCoreV1EventSource = require('./IoK8sApiCoreV1EventSource');
const IoK8sApiCoreV1ObjectReference = require('./IoK8sApiCoreV1ObjectReference');
const IoK8sApimachineryPkgApisMetaV1MicroTime = require('./IoK8sApimachineryPkgApisMetaV1MicroTime');
const IoK8sApimachineryPkgApisMetaV1ObjectMeta = require('./IoK8sApimachineryPkgApisMetaV1ObjectMeta');
const IoK8sApimachineryPkgApisMetaV1Time = require('./IoK8sApimachineryPkgApisMetaV1Time');

/**
 * The IoK8sApiCoreV1Event model module.
 * @module model/IoK8sApiCoreV1Event
 * @version VERSION
 */
class IoK8sApiCoreV1Event {
  /**
   * Constructs a new <code>IoK8sApiCoreV1Event</code>.
   * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
   * @alias module:model/IoK8sApiCoreV1Event
   * @class
   * @param involvedObject {module:model/IoK8sApiCoreV1ObjectReference} 
   * @param metadata {module:model/IoK8sApimachineryPkgApisMetaV1ObjectMeta} 
   */
  constructor(involvedObject, metadata) {
    this.involvedObject = involvedObject;
    this.metadata = metadata;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1Event</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1Event} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1Event} The populated <code>IoK8sApiCoreV1Event</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1Event();
      if (data.hasOwnProperty('action'))
        obj.action = ApiClient.convertToType(data['action'], 'String');
      if (data.hasOwnProperty('apiVersion'))
        obj.apiVersion = ApiClient.convertToType(data['apiVersion'], 'String');
      if (data.hasOwnProperty('count'))
        obj.count = ApiClient.convertToType(data['count'], 'Number');
      if (data.hasOwnProperty('eventTime'))
        obj.eventTime = IoK8sApimachineryPkgApisMetaV1MicroTime.constructFromObject(data['eventTime']);
      if (data.hasOwnProperty('firstTimestamp'))
        obj.firstTimestamp = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['firstTimestamp']);
      if (data.hasOwnProperty('involvedObject'))
        obj.involvedObject = IoK8sApiCoreV1ObjectReference.constructFromObject(data['involvedObject']);
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('lastTimestamp'))
        obj.lastTimestamp = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['lastTimestamp']);
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('metadata'))
        obj.metadata = IoK8sApimachineryPkgApisMetaV1ObjectMeta.constructFromObject(data['metadata']);
      if (data.hasOwnProperty('reason'))
        obj.reason = ApiClient.convertToType(data['reason'], 'String');
      if (data.hasOwnProperty('related'))
        obj.related = IoK8sApiCoreV1ObjectReference.constructFromObject(data['related']);
      if (data.hasOwnProperty('reportingComponent'))
        obj.reportingComponent = ApiClient.convertToType(data['reportingComponent'], 'String');
      if (data.hasOwnProperty('reportingInstance'))
        obj.reportingInstance = ApiClient.convertToType(data['reportingInstance'], 'String');
      if (data.hasOwnProperty('series'))
        obj.series = IoK8sApiCoreV1EventSeries.constructFromObject(data['series']);
      if (data.hasOwnProperty('source'))
        obj.source = IoK8sApiCoreV1EventSource.constructFromObject(data['source']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * What action was taken/failed regarding to the Regarding object.
 * @member {String} action
 */
IoK8sApiCoreV1Event.prototype.action = undefined;

/**
 * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
 * @member {String} apiVersion
 */
IoK8sApiCoreV1Event.prototype.apiVersion = undefined;

/**
 * The number of times this event has occurred.
 * @member {Number} count
 */
IoK8sApiCoreV1Event.prototype.count = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1MicroTime} eventTime
 */
IoK8sApiCoreV1Event.prototype.eventTime = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} firstTimestamp
 */
IoK8sApiCoreV1Event.prototype.firstTimestamp = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ObjectReference} involvedObject
 */
IoK8sApiCoreV1Event.prototype.involvedObject = undefined;

/**
 * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
 * @member {String} kind
 */
IoK8sApiCoreV1Event.prototype.kind = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} lastTimestamp
 */
IoK8sApiCoreV1Event.prototype.lastTimestamp = undefined;

/**
 * A human-readable description of the status of this operation.
 * @member {String} message
 */
IoK8sApiCoreV1Event.prototype.message = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1ObjectMeta} metadata
 */
IoK8sApiCoreV1Event.prototype.metadata = undefined;

/**
 * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
 * @member {String} reason
 */
IoK8sApiCoreV1Event.prototype.reason = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ObjectReference} related
 */
IoK8sApiCoreV1Event.prototype.related = undefined;

/**
 * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
 * @member {String} reportingComponent
 */
IoK8sApiCoreV1Event.prototype.reportingComponent = undefined;

/**
 * ID of the controller instance, e.g. `kubelet-xyzf`.
 * @member {String} reportingInstance
 */
IoK8sApiCoreV1Event.prototype.reportingInstance = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1EventSeries} series
 */
IoK8sApiCoreV1Event.prototype.series = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1EventSource} source
 */
IoK8sApiCoreV1Event.prototype.source = undefined;

/**
 * Type of this event (Normal, Warning), new types could be added in the future
 * @member {String} type
 */
IoK8sApiCoreV1Event.prototype.type = undefined;

module.exports = IoK8sApiCoreV1Event;
