/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1HTTPHeader = require('./IoK8sApiCoreV1HTTPHeader');
const IoK8sApimachineryPkgUtilIntstrIntOrString = require('./IoK8sApimachineryPkgUtilIntstrIntOrString');

/**
 * The IoK8sApiCoreV1HTTPGetAction model module.
 * @module model/IoK8sApiCoreV1HTTPGetAction
 * @version VERSION
 */
class IoK8sApiCoreV1HTTPGetAction {
  /**
   * Constructs a new <code>IoK8sApiCoreV1HTTPGetAction</code>.
   * HTTPGetAction describes an action based on HTTP Get requests.
   * @alias module:model/IoK8sApiCoreV1HTTPGetAction
   * @class
   * @param port {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} 
   */
  constructor(port) {
    this.port = port;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1HTTPGetAction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1HTTPGetAction} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1HTTPGetAction} The populated <code>IoK8sApiCoreV1HTTPGetAction</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1HTTPGetAction();
      if (data.hasOwnProperty('host'))
        obj.host = ApiClient.convertToType(data['host'], 'String');
      if (data.hasOwnProperty('httpHeaders'))
        obj.httpHeaders = ApiClient.convertToType(data['httpHeaders'], [IoK8sApiCoreV1HTTPHeader]);
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('port'))
        obj.port = IoK8sApimachineryPkgUtilIntstrIntOrString.constructFromObject(data['port']);
      if (data.hasOwnProperty('scheme'))
        obj.scheme = ApiClient.convertToType(data['scheme'], 'String');
    }
    return obj;
  }
}

/**
 * Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
 * @member {String} host
 */
IoK8sApiCoreV1HTTPGetAction.prototype.host = undefined;

/**
 * Custom headers to set in the request. HTTP allows repeated headers.
 * @member {Array.<module:model/IoK8sApiCoreV1HTTPHeader>} httpHeaders
 */
IoK8sApiCoreV1HTTPGetAction.prototype.httpHeaders = undefined;

/**
 * Path to access on the HTTP server.
 * @member {String} path
 */
IoK8sApiCoreV1HTTPGetAction.prototype.path = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} port
 */
IoK8sApiCoreV1HTTPGetAction.prototype.port = undefined;

/**
 * Scheme to use for connecting to the host. Defaults to HTTP.
 * @member {String} scheme
 */
IoK8sApiCoreV1HTTPGetAction.prototype.scheme = undefined;

module.exports = IoK8sApiCoreV1HTTPGetAction;
