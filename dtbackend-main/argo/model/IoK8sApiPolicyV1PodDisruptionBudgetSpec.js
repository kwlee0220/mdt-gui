/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApimachineryPkgApisMetaV1LabelSelector = require('./IoK8sApimachineryPkgApisMetaV1LabelSelector');
const IoK8sApimachineryPkgUtilIntstrIntOrString = require('./IoK8sApimachineryPkgUtilIntstrIntOrString');

/**
 * The IoK8sApiPolicyV1PodDisruptionBudgetSpec model module.
 * @module model/IoK8sApiPolicyV1PodDisruptionBudgetSpec
 * @version VERSION
 */
class IoK8sApiPolicyV1PodDisruptionBudgetSpec {
  /**
   * Constructs a new <code>IoK8sApiPolicyV1PodDisruptionBudgetSpec</code>.
   * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
   * @alias module:model/IoK8sApiPolicyV1PodDisruptionBudgetSpec
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoK8sApiPolicyV1PodDisruptionBudgetSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiPolicyV1PodDisruptionBudgetSpec} obj Optional instance to populate.
   * @return {module:model/IoK8sApiPolicyV1PodDisruptionBudgetSpec} The populated <code>IoK8sApiPolicyV1PodDisruptionBudgetSpec</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiPolicyV1PodDisruptionBudgetSpec();
      if (data.hasOwnProperty('maxUnavailable'))
        obj.maxUnavailable = IoK8sApimachineryPkgUtilIntstrIntOrString.constructFromObject(data['maxUnavailable']);
      if (data.hasOwnProperty('minAvailable'))
        obj.minAvailable = IoK8sApimachineryPkgUtilIntstrIntOrString.constructFromObject(data['minAvailable']);
      if (data.hasOwnProperty('selector'))
        obj.selector = IoK8sApimachineryPkgApisMetaV1LabelSelector.constructFromObject(data['selector']);
      if (data.hasOwnProperty('unhealthyPodEvictionPolicy'))
        obj.unhealthyPodEvictionPolicy = ApiClient.convertToType(data['unhealthyPodEvictionPolicy'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} maxUnavailable
 */
IoK8sApiPolicyV1PodDisruptionBudgetSpec.prototype.maxUnavailable = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgUtilIntstrIntOrString} minAvailable
 */
IoK8sApiPolicyV1PodDisruptionBudgetSpec.prototype.minAvailable = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1LabelSelector} selector
 */
IoK8sApiPolicyV1PodDisruptionBudgetSpec.prototype.selector = undefined;

/**
 * UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".  Valid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.  IfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.  AlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.  Additional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.  This field is beta-level. The eviction API uses this field when the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
 * @member {String} unhealthyPodEvictionPolicy
 */
IoK8sApiPolicyV1PodDisruptionBudgetSpec.prototype.unhealthyPodEvictionPolicy = undefined;

module.exports = IoK8sApiPolicyV1PodDisruptionBudgetSpec;
