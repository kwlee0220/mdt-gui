/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1ArtifactoryArtifact = require('./IoArgoprojWorkflowV1alpha1ArtifactoryArtifact');
const IoArgoprojWorkflowV1alpha1AzureArtifact = require('./IoArgoprojWorkflowV1alpha1AzureArtifact');
const IoArgoprojWorkflowV1alpha1GCSArtifact = require('./IoArgoprojWorkflowV1alpha1GCSArtifact');
const IoArgoprojWorkflowV1alpha1GitArtifact = require('./IoArgoprojWorkflowV1alpha1GitArtifact');
const IoArgoprojWorkflowV1alpha1HDFSArtifact = require('./IoArgoprojWorkflowV1alpha1HDFSArtifact');
const IoArgoprojWorkflowV1alpha1HTTPArtifact = require('./IoArgoprojWorkflowV1alpha1HTTPArtifact');
const IoArgoprojWorkflowV1alpha1OSSArtifact = require('./IoArgoprojWorkflowV1alpha1OSSArtifact');
const IoArgoprojWorkflowV1alpha1RawArtifact = require('./IoArgoprojWorkflowV1alpha1RawArtifact');
const IoArgoprojWorkflowV1alpha1S3Artifact = require('./IoArgoprojWorkflowV1alpha1S3Artifact');

/**
 * The IoArgoprojWorkflowV1alpha1ArtifactLocation model module.
 * @module model/IoArgoprojWorkflowV1alpha1ArtifactLocation
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1ArtifactLocation {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1ArtifactLocation</code>.
   * ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.
   * @alias module:model/IoArgoprojWorkflowV1alpha1ArtifactLocation
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1ArtifactLocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1ArtifactLocation} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1ArtifactLocation} The populated <code>IoArgoprojWorkflowV1alpha1ArtifactLocation</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1ArtifactLocation();
      if (data.hasOwnProperty('archiveLogs'))
        obj.archiveLogs = ApiClient.convertToType(data['archiveLogs'], 'Boolean');
      if (data.hasOwnProperty('artifactory'))
        obj.artifactory = IoArgoprojWorkflowV1alpha1ArtifactoryArtifact.constructFromObject(data['artifactory']);
      if (data.hasOwnProperty('azure'))
        obj.azure = IoArgoprojWorkflowV1alpha1AzureArtifact.constructFromObject(data['azure']);
      if (data.hasOwnProperty('gcs'))
        obj.gcs = IoArgoprojWorkflowV1alpha1GCSArtifact.constructFromObject(data['gcs']);
      if (data.hasOwnProperty('git'))
        obj.git = IoArgoprojWorkflowV1alpha1GitArtifact.constructFromObject(data['git']);
      if (data.hasOwnProperty('hdfs'))
        obj.hdfs = IoArgoprojWorkflowV1alpha1HDFSArtifact.constructFromObject(data['hdfs']);
      if (data.hasOwnProperty('http'))
        obj.http = IoArgoprojWorkflowV1alpha1HTTPArtifact.constructFromObject(data['http']);
      if (data.hasOwnProperty('oss'))
        obj.oss = IoArgoprojWorkflowV1alpha1OSSArtifact.constructFromObject(data['oss']);
      if (data.hasOwnProperty('raw'))
        obj.raw = IoArgoprojWorkflowV1alpha1RawArtifact.constructFromObject(data['raw']);
      if (data.hasOwnProperty('s3'))
        obj.s3 = IoArgoprojWorkflowV1alpha1S3Artifact.constructFromObject(data['s3']);
    }
    return obj;
  }
}

/**
 * ArchiveLogs indicates if the container logs should be archived
 * @member {Boolean} archiveLogs
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.archiveLogs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtifactoryArtifact} artifactory
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.artifactory = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1AzureArtifact} azure
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.azure = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1GCSArtifact} gcs
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.gcs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1GitArtifact} git
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.git = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1HDFSArtifact} hdfs
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.hdfs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1HTTPArtifact} http
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.http = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1OSSArtifact} oss
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.oss = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1RawArtifact} raw
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.raw = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1S3Artifact} s3
 */
IoArgoprojWorkflowV1alpha1ArtifactLocation.prototype.s3 = undefined;

module.exports = IoArgoprojWorkflowV1alpha1ArtifactLocation;
