/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoArgoprojEventsV1alpha1TriggerParameterSource model module.
 * @module model/IoArgoprojEventsV1alpha1TriggerParameterSource
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1TriggerParameterSource {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1TriggerParameterSource</code>.
   * @alias module:model/IoArgoprojEventsV1alpha1TriggerParameterSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1TriggerParameterSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1TriggerParameterSource} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1TriggerParameterSource} The populated <code>IoArgoprojEventsV1alpha1TriggerParameterSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1TriggerParameterSource();
      if (data.hasOwnProperty('contextKey'))
        obj.contextKey = ApiClient.convertToType(data['contextKey'], 'String');
      if (data.hasOwnProperty('contextTemplate'))
        obj.contextTemplate = ApiClient.convertToType(data['contextTemplate'], 'String');
      if (data.hasOwnProperty('dataKey'))
        obj.dataKey = ApiClient.convertToType(data['dataKey'], 'String');
      if (data.hasOwnProperty('dataTemplate'))
        obj.dataTemplate = ApiClient.convertToType(data['dataTemplate'], 'String');
      if (data.hasOwnProperty('dependencyName'))
        obj.dependencyName = ApiClient.convertToType(data['dependencyName'], 'String');
      if (data.hasOwnProperty('useRawData'))
        obj.useRawData = ApiClient.convertToType(data['useRawData'], 'Boolean');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
    }
    return obj;
  }
}

/**
 * ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
 * @member {String} contextKey
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.contextKey = undefined;

/**
 * @member {String} contextTemplate
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.contextTemplate = undefined;

/**
 * DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
 * @member {String} dataKey
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.dataKey = undefined;

/**
 * @member {String} dataTemplate
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.dataTemplate = undefined;

/**
 * DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
 * @member {String} dependencyName
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.dependencyName = undefined;

/**
 * @member {Boolean} useRawData
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.useRawData = undefined;

/**
 * Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.
 * @member {String} value
 */
IoArgoprojEventsV1alpha1TriggerParameterSource.prototype.value = undefined;

module.exports = IoArgoprojEventsV1alpha1TriggerParameterSource;
