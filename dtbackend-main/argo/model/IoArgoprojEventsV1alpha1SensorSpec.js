/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojEventsV1alpha1EventDependency = require('./IoArgoprojEventsV1alpha1EventDependency');
const IoArgoprojEventsV1alpha1Template = require('./IoArgoprojEventsV1alpha1Template');
const IoArgoprojEventsV1alpha1Trigger = require('./IoArgoprojEventsV1alpha1Trigger');

/**
 * The IoArgoprojEventsV1alpha1SensorSpec model module.
 * @module model/IoArgoprojEventsV1alpha1SensorSpec
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1SensorSpec {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1SensorSpec</code>.
   * @alias module:model/IoArgoprojEventsV1alpha1SensorSpec
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1SensorSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1SensorSpec} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1SensorSpec} The populated <code>IoArgoprojEventsV1alpha1SensorSpec</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1SensorSpec();
      if (data.hasOwnProperty('dependencies'))
        obj.dependencies = ApiClient.convertToType(data['dependencies'], [IoArgoprojEventsV1alpha1EventDependency]);
      if (data.hasOwnProperty('errorOnFailedRound'))
        obj.errorOnFailedRound = ApiClient.convertToType(data['errorOnFailedRound'], 'Boolean');
      if (data.hasOwnProperty('eventBusName'))
        obj.eventBusName = ApiClient.convertToType(data['eventBusName'], 'String');
      if (data.hasOwnProperty('loggingFields'))
        obj.loggingFields = ApiClient.convertToType(data['loggingFields'], {'String': 'String'});
      if (data.hasOwnProperty('replicas'))
        obj.replicas = ApiClient.convertToType(data['replicas'], 'Number');
      if (data.hasOwnProperty('revisionHistoryLimit'))
        obj.revisionHistoryLimit = ApiClient.convertToType(data['revisionHistoryLimit'], 'Number');
      if (data.hasOwnProperty('template'))
        obj.template = IoArgoprojEventsV1alpha1Template.constructFromObject(data['template']);
      if (data.hasOwnProperty('triggers'))
        obj.triggers = ApiClient.convertToType(data['triggers'], [IoArgoprojEventsV1alpha1Trigger]);
    }
    return obj;
  }
}

/**
 * Dependencies is a list of the events that this sensor is dependent on.
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1EventDependency>} dependencies
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.dependencies = undefined;

/**
 * ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.
 * @member {Boolean} errorOnFailedRound
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.errorOnFailedRound = undefined;

/**
 * @member {String} eventBusName
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.eventBusName = undefined;

/**
 * @member {Object.<String, String>} loggingFields
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.loggingFields = undefined;

/**
 * @member {Number} replicas
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.replicas = undefined;

/**
 * @member {Number} revisionHistoryLimit
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.revisionHistoryLimit = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1Template} template
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.template = undefined;

/**
 * Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1Trigger>} triggers
 */
IoArgoprojEventsV1alpha1SensorSpec.prototype.triggers = undefined;

module.exports = IoArgoprojEventsV1alpha1SensorSpec;
