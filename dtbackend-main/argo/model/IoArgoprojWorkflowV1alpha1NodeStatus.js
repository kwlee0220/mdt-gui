/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1Inputs = require('./IoArgoprojWorkflowV1alpha1Inputs');
const IoArgoprojWorkflowV1alpha1MemoizationStatus = require('./IoArgoprojWorkflowV1alpha1MemoizationStatus');
const IoArgoprojWorkflowV1alpha1NodeFlag = require('./IoArgoprojWorkflowV1alpha1NodeFlag');
const IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus = require('./IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus');
const IoArgoprojWorkflowV1alpha1Outputs = require('./IoArgoprojWorkflowV1alpha1Outputs');
const IoArgoprojWorkflowV1alpha1TemplateRef = require('./IoArgoprojWorkflowV1alpha1TemplateRef');
const IoK8sApimachineryPkgApisMetaV1Time = require('./IoK8sApimachineryPkgApisMetaV1Time');

/**
 * The IoArgoprojWorkflowV1alpha1NodeStatus model module.
 * @module model/IoArgoprojWorkflowV1alpha1NodeStatus
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1NodeStatus {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1NodeStatus</code>.
   * NodeStatus contains status information about an individual node in the workflow
   * @alias module:model/IoArgoprojWorkflowV1alpha1NodeStatus
   * @class
   * @param id {String} ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic
   * @param name {String} Name is unique name in the node tree used to generate the node ID
   * @param type {String} Type indicates type of node
   */
  constructor(id, name, type) {
    this.id = id;
    this.name = name;
    this.type = type;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1NodeStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1NodeStatus} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1NodeStatus} The populated <code>IoArgoprojWorkflowV1alpha1NodeStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1NodeStatus();
      if (data.hasOwnProperty('boundaryID'))
        obj.boundaryID = ApiClient.convertToType(data['boundaryID'], 'String');
      if (data.hasOwnProperty('children'))
        obj.children = ApiClient.convertToType(data['children'], ['String']);
      if (data.hasOwnProperty('daemoned'))
        obj.daemoned = ApiClient.convertToType(data['daemoned'], 'Boolean');
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('estimatedDuration'))
        obj.estimatedDuration = ApiClient.convertToType(data['estimatedDuration'], 'Number');
      if (data.hasOwnProperty('finishedAt'))
        obj.finishedAt = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['finishedAt']);
      if (data.hasOwnProperty('hostNodeName'))
        obj.hostNodeName = ApiClient.convertToType(data['hostNodeName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('inputs'))
        obj.inputs = IoArgoprojWorkflowV1alpha1Inputs.constructFromObject(data['inputs']);
      if (data.hasOwnProperty('memoizationStatus'))
        obj.memoizationStatus = IoArgoprojWorkflowV1alpha1MemoizationStatus.constructFromObject(data['memoizationStatus']);
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('nodeFlag'))
        obj.nodeFlag = IoArgoprojWorkflowV1alpha1NodeFlag.constructFromObject(data['nodeFlag']);
      if (data.hasOwnProperty('outboundNodes'))
        obj.outboundNodes = ApiClient.convertToType(data['outboundNodes'], ['String']);
      if (data.hasOwnProperty('outputs'))
        obj.outputs = IoArgoprojWorkflowV1alpha1Outputs.constructFromObject(data['outputs']);
      if (data.hasOwnProperty('phase'))
        obj.phase = ApiClient.convertToType(data['phase'], 'String');
      if (data.hasOwnProperty('podIP'))
        obj.podIP = ApiClient.convertToType(data['podIP'], 'String');
      if (data.hasOwnProperty('progress'))
        obj.progress = ApiClient.convertToType(data['progress'], 'String');
      if (data.hasOwnProperty('resourcesDuration'))
        obj.resourcesDuration = ApiClient.convertToType(data['resourcesDuration'], {'String': 'Number'});
      if (data.hasOwnProperty('startedAt'))
        obj.startedAt = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['startedAt']);
      if (data.hasOwnProperty('synchronizationStatus'))
        obj.synchronizationStatus = IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus.constructFromObject(data['synchronizationStatus']);
      if (data.hasOwnProperty('templateName'))
        obj.templateName = ApiClient.convertToType(data['templateName'], 'String');
      if (data.hasOwnProperty('templateRef'))
        obj.templateRef = IoArgoprojWorkflowV1alpha1TemplateRef.constructFromObject(data['templateRef']);
      if (data.hasOwnProperty('templateScope'))
        obj.templateScope = ApiClient.convertToType(data['templateScope'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * BoundaryID indicates the node ID of the associated template root node in which this node belongs to
 * @member {String} boundaryID
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.boundaryID = undefined;

/**
 * Children is a list of child node IDs
 * @member {Array.<String>} children
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.children = undefined;

/**
 * Daemoned tracks whether or not this node was daemoned and need to be terminated
 * @member {Boolean} daemoned
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.daemoned = undefined;

/**
 * DisplayName is a human readable representation of the node. Unique within a template boundary
 * @member {String} displayName
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.displayName = undefined;

/**
 * EstimatedDuration in seconds.
 * @member {Number} estimatedDuration
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.estimatedDuration = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} finishedAt
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.finishedAt = undefined;

/**
 * HostNodeName name of the Kubernetes node on which the Pod is running, if applicable
 * @member {String} hostNodeName
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.hostNodeName = undefined;

/**
 * ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic
 * @member {String} id
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.id = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Inputs} inputs
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.inputs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1MemoizationStatus} memoizationStatus
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.memoizationStatus = undefined;

/**
 * A human readable message indicating details about why the node is in this condition.
 * @member {String} message
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.message = undefined;

/**
 * Name is unique name in the node tree used to generate the node ID
 * @member {String} name
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.name = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1NodeFlag} nodeFlag
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.nodeFlag = undefined;

/**
 * OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.
 * @member {Array.<String>} outboundNodes
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.outboundNodes = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Outputs} outputs
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.outputs = undefined;

/**
 * Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \"Pending\", \"Running\" before the node is completed, or \"Succeeded\", \"Skipped\", \"Failed\", \"Error\", or \"Omitted\" as a final state.
 * @member {String} phase
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.phase = undefined;

/**
 * PodIP captures the IP of the pod for daemoned steps
 * @member {String} podIP
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.podIP = undefined;

/**
 * Progress to completion
 * @member {String} progress
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.progress = undefined;

/**
 * ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.
 * @member {Object.<String, Number>} resourcesDuration
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.resourcesDuration = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} startedAt
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.startedAt = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus} synchronizationStatus
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.synchronizationStatus = undefined;

/**
 * TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)
 * @member {String} templateName
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.templateName = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1TemplateRef} templateRef
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.templateRef = undefined;

/**
 * TemplateScope is the template scope in which the template of this node was retrieved.
 * @member {String} templateScope
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.templateScope = undefined;

/**
 * Type indicates type of node
 * @member {String} type
 */
IoArgoprojWorkflowV1alpha1NodeStatus.prototype.type = undefined;

module.exports = IoArgoprojWorkflowV1alpha1NodeStatus;
