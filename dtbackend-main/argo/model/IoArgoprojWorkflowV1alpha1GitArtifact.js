/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1SecretKeySelector = require('./IoK8sApiCoreV1SecretKeySelector');

/**
 * The IoArgoprojWorkflowV1alpha1GitArtifact model module.
 * @module model/IoArgoprojWorkflowV1alpha1GitArtifact
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1GitArtifact {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1GitArtifact</code>.
   * GitArtifact is the location of an git artifact
   * @alias module:model/IoArgoprojWorkflowV1alpha1GitArtifact
   * @class
   * @param repo {String} Repo is the git repository
   */
  constructor(repo) {
    this.repo = repo;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1GitArtifact</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1GitArtifact} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1GitArtifact} The populated <code>IoArgoprojWorkflowV1alpha1GitArtifact</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1GitArtifact();
      if (data.hasOwnProperty('branch'))
        obj.branch = ApiClient.convertToType(data['branch'], 'String');
      if (data.hasOwnProperty('depth'))
        obj.depth = ApiClient.convertToType(data['depth'], 'Number');
      if (data.hasOwnProperty('disableSubmodules'))
        obj.disableSubmodules = ApiClient.convertToType(data['disableSubmodules'], 'Boolean');
      if (data.hasOwnProperty('fetch'))
        obj.fetch = ApiClient.convertToType(data['fetch'], ['String']);
      if (data.hasOwnProperty('insecureIgnoreHostKey'))
        obj.insecureIgnoreHostKey = ApiClient.convertToType(data['insecureIgnoreHostKey'], 'Boolean');
      if (data.hasOwnProperty('insecureSkipTLS'))
        obj.insecureSkipTLS = ApiClient.convertToType(data['insecureSkipTLS'], 'Boolean');
      if (data.hasOwnProperty('passwordSecret'))
        obj.passwordSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['passwordSecret']);
      if (data.hasOwnProperty('repo'))
        obj.repo = ApiClient.convertToType(data['repo'], 'String');
      if (data.hasOwnProperty('revision'))
        obj.revision = ApiClient.convertToType(data['revision'], 'String');
      if (data.hasOwnProperty('singleBranch'))
        obj.singleBranch = ApiClient.convertToType(data['singleBranch'], 'Boolean');
      if (data.hasOwnProperty('sshPrivateKeySecret'))
        obj.sshPrivateKeySecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['sshPrivateKeySecret']);
      if (data.hasOwnProperty('usernameSecret'))
        obj.usernameSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['usernameSecret']);
    }
    return obj;
  }
}

/**
 * Branch is the branch to fetch when `SingleBranch` is enabled
 * @member {String} branch
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.branch = undefined;

/**
 * Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
 * @member {Number} depth
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.depth = undefined;

/**
 * DisableSubmodules disables submodules during git clone
 * @member {Boolean} disableSubmodules
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.disableSubmodules = undefined;

/**
 * Fetch specifies a number of refs that should be fetched before checkout
 * @member {Array.<String>} fetch
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.fetch = undefined;

/**
 * InsecureIgnoreHostKey disables SSH strict host key checking during git clone
 * @member {Boolean} insecureIgnoreHostKey
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.insecureIgnoreHostKey = undefined;

/**
 * InsecureSkipTLS disables server certificate verification resulting in insecure HTTPS connections
 * @member {Boolean} insecureSkipTLS
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.insecureSkipTLS = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} passwordSecret
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.passwordSecret = undefined;

/**
 * Repo is the git repository
 * @member {String} repo
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.repo = undefined;

/**
 * Revision is the git commit, tag, branch to checkout
 * @member {String} revision
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.revision = undefined;

/**
 * SingleBranch enables single branch clone, using the `branch` parameter
 * @member {Boolean} singleBranch
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.singleBranch = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} sshPrivateKeySecret
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.sshPrivateKeySecret = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} usernameSecret
 */
IoArgoprojWorkflowV1alpha1GitArtifact.prototype.usernameSecret = undefined;

module.exports = IoArgoprojWorkflowV1alpha1GitArtifact;
