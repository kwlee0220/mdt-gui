/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojEventsV1alpha1SASLConfig = require('./IoArgoprojEventsV1alpha1SASLConfig');
const IoArgoprojEventsV1alpha1SchemaRegistryConfig = require('./IoArgoprojEventsV1alpha1SchemaRegistryConfig');
const IoArgoprojEventsV1alpha1TLSConfig = require('./IoArgoprojEventsV1alpha1TLSConfig');
const IoArgoprojEventsV1alpha1TriggerParameter = require('./IoArgoprojEventsV1alpha1TriggerParameter');

/**
 * The IoArgoprojEventsV1alpha1KafkaTrigger model module.
 * @module model/IoArgoprojEventsV1alpha1KafkaTrigger
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1KafkaTrigger {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1KafkaTrigger</code>.
   * KafkaTrigger refers to the specification of the Kafka trigger.
   * @alias module:model/IoArgoprojEventsV1alpha1KafkaTrigger
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1KafkaTrigger</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1KafkaTrigger} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1KafkaTrigger} The populated <code>IoArgoprojEventsV1alpha1KafkaTrigger</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1KafkaTrigger();
      if (data.hasOwnProperty('compress'))
        obj.compress = ApiClient.convertToType(data['compress'], 'Boolean');
      if (data.hasOwnProperty('flushFrequency'))
        obj.flushFrequency = ApiClient.convertToType(data['flushFrequency'], 'Number');
      if (data.hasOwnProperty('parameters'))
        obj.parameters = ApiClient.convertToType(data['parameters'], [IoArgoprojEventsV1alpha1TriggerParameter]);
      if (data.hasOwnProperty('partition'))
        obj.partition = ApiClient.convertToType(data['partition'], 'Number');
      if (data.hasOwnProperty('partitioningKey'))
        obj.partitioningKey = ApiClient.convertToType(data['partitioningKey'], 'String');
      if (data.hasOwnProperty('payload'))
        obj.payload = ApiClient.convertToType(data['payload'], [IoArgoprojEventsV1alpha1TriggerParameter]);
      if (data.hasOwnProperty('requiredAcks'))
        obj.requiredAcks = ApiClient.convertToType(data['requiredAcks'], 'Number');
      if (data.hasOwnProperty('sasl'))
        obj.sasl = IoArgoprojEventsV1alpha1SASLConfig.constructFromObject(data['sasl']);
      if (data.hasOwnProperty('schemaRegistry'))
        obj.schemaRegistry = IoArgoprojEventsV1alpha1SchemaRegistryConfig.constructFromObject(data['schemaRegistry']);
      if (data.hasOwnProperty('tls'))
        obj.tls = IoArgoprojEventsV1alpha1TLSConfig.constructFromObject(data['tls']);
      if (data.hasOwnProperty('topic'))
        obj.topic = ApiClient.convertToType(data['topic'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Boolean} compress
 */
module.exports.compress = undefined;

/**
 * @member {Number} flushFrequency
 */
module.exports.flushFrequency = undefined;

/**
 * Parameters is the list of parameters that is applied to resolved Kafka trigger object.
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1TriggerParameter>} parameters
 */
module.exports.parameters = undefined;

/**
 * @member {Number} partition
 */
module.exports.partition = undefined;

/**
 * The partitioning key for the messages put on the Kafka topic. +optional.
 * @member {String} partitioningKey
 */
module.exports.partitioningKey = undefined;

/**
 * Payload is the list of key-value extracted from an event payload to construct the request payload.
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1TriggerParameter>} payload
 */
module.exports.payload = undefined;

/**
 * RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.
 * @member {Number} requiredAcks
 */
module.exports.requiredAcks = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1SASLConfig} sasl
 */
module.exports.sasl = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1SchemaRegistryConfig} schemaRegistry
 */
module.exports.schemaRegistry = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1TLSConfig} tls
 */
module.exports.tls = undefined;

/**
 * @member {String} topic
 */
module.exports.topic = undefined;

/**
 * URL of the Kafka broker, multiple URLs separated by comma.
 * @member {String} url
 */
module.exports.url = undefined;

/**
 * @member {String} version
 */
module.exports.version = undefined;

module.exports = IoArgoprojEventsV1alpha1KafkaTrigger;
