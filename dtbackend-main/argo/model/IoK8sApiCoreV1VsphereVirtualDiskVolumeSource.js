/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1VsphereVirtualDiskVolumeSource model module.
 * @module model/IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1VsphereVirtualDiskVolumeSource</code>.
   * Represents a vSphere volume resource.
   * @alias module:model/IoK8sApiCoreV1VsphereVirtualDiskVolumeSource
   * @class
   * @param volumePath {String} volumePath is the path that identifies vSphere volume vmdk
   */
  constructor(volumePath) {
    this.volumePath = volumePath;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1VsphereVirtualDiskVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1VsphereVirtualDiskVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1VsphereVirtualDiskVolumeSource} The populated <code>IoK8sApiCoreV1VsphereVirtualDiskVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1VsphereVirtualDiskVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('storagePolicyID'))
        obj.storagePolicyID = ApiClient.convertToType(data['storagePolicyID'], 'String');
      if (data.hasOwnProperty('storagePolicyName'))
        obj.storagePolicyName = ApiClient.convertToType(data['storagePolicyName'], 'String');
      if (data.hasOwnProperty('volumePath'))
        obj.volumePath = ApiClient.convertToType(data['volumePath'], 'String');
    }
    return obj;
  }
}

/**
 * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.prototype.fsType = undefined;

/**
 * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
 * @member {String} storagePolicyID
 */
IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.prototype.storagePolicyID = undefined;

/**
 * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
 * @member {String} storagePolicyName
 */
IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.prototype.storagePolicyName = undefined;

/**
 * volumePath is the path that identifies vSphere volume vmdk
 * @member {String} volumePath
 */
IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.prototype.volumePath = undefined;

module.exports = IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;
