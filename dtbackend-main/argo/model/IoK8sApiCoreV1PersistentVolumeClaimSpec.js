/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1TypedLocalObjectReference = require('./IoK8sApiCoreV1TypedLocalObjectReference');
const IoK8sApiCoreV1TypedObjectReference = require('./IoK8sApiCoreV1TypedObjectReference');
const IoK8sApiCoreV1VolumeResourceRequirements = require('./IoK8sApiCoreV1VolumeResourceRequirements');
const IoK8sApimachineryPkgApisMetaV1LabelSelector = require('./IoK8sApimachineryPkgApisMetaV1LabelSelector');

/**
 * The IoK8sApiCoreV1PersistentVolumeClaimSpec model module.
 * @module model/IoK8sApiCoreV1PersistentVolumeClaimSpec
 * @version VERSION
 */
class IoK8sApiCoreV1PersistentVolumeClaimSpec {
  /**
   * Constructs a new <code>IoK8sApiCoreV1PersistentVolumeClaimSpec</code>.
   * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
   * @alias module:model/IoK8sApiCoreV1PersistentVolumeClaimSpec
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1PersistentVolumeClaimSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1PersistentVolumeClaimSpec} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1PersistentVolumeClaimSpec} The populated <code>IoK8sApiCoreV1PersistentVolumeClaimSpec</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1PersistentVolumeClaimSpec();
      if (data.hasOwnProperty('accessModes'))
        obj.accessModes = ApiClient.convertToType(data['accessModes'], ['String']);
      if (data.hasOwnProperty('dataSource'))
        obj.dataSource = IoK8sApiCoreV1TypedLocalObjectReference.constructFromObject(data['dataSource']);
      if (data.hasOwnProperty('dataSourceRef'))
        obj.dataSourceRef = IoK8sApiCoreV1TypedObjectReference.constructFromObject(data['dataSourceRef']);
      if (data.hasOwnProperty('resources'))
        obj.resources = IoK8sApiCoreV1VolumeResourceRequirements.constructFromObject(data['resources']);
      if (data.hasOwnProperty('selector'))
        obj.selector = IoK8sApimachineryPkgApisMetaV1LabelSelector.constructFromObject(data['selector']);
      if (data.hasOwnProperty('storageClassName'))
        obj.storageClassName = ApiClient.convertToType(data['storageClassName'], 'String');
      if (data.hasOwnProperty('volumeAttributesClassName'))
        obj.volumeAttributesClassName = ApiClient.convertToType(data['volumeAttributesClassName'], 'String');
      if (data.hasOwnProperty('volumeMode'))
        obj.volumeMode = ApiClient.convertToType(data['volumeMode'], 'String');
      if (data.hasOwnProperty('volumeName'))
        obj.volumeName = ApiClient.convertToType(data['volumeName'], 'String');
    }
    return obj;
  }
}

/**
 * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
 * @member {Array.<String>} accessModes
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.accessModes = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1TypedLocalObjectReference} dataSource
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.dataSource = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1TypedObjectReference} dataSourceRef
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.dataSourceRef = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1VolumeResourceRequirements} resources
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.resources = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1LabelSelector} selector
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.selector = undefined;

/**
 * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
 * @member {String} storageClassName
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.storageClassName = undefined;

/**
 * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
 * @member {String} volumeAttributesClassName
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.volumeAttributesClassName = undefined;

/**
 * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
 * @member {String} volumeMode
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.volumeMode = undefined;

/**
 * volumeName is the binding reference to the PersistentVolume backing this claim.
 * @member {String} volumeName
 */
IoK8sApiCoreV1PersistentVolumeClaimSpec.prototype.volumeName = undefined;

module.exports = IoK8sApiCoreV1PersistentVolumeClaimSpec;
