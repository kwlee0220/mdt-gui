/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1Condition = require('./IoArgoprojWorkflowV1alpha1Condition');
const IoK8sApiCoreV1ObjectReference = require('./IoK8sApiCoreV1ObjectReference');
const IoK8sApimachineryPkgApisMetaV1Time = require('./IoK8sApimachineryPkgApisMetaV1Time');

/**
 * The IoArgoprojWorkflowV1alpha1CronWorkflowStatus model module.
 * @module model/IoArgoprojWorkflowV1alpha1CronWorkflowStatus
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1CronWorkflowStatus</code>.
   * CronWorkflowStatus is the status of a CronWorkflow
   * @alias module:model/IoArgoprojWorkflowV1alpha1CronWorkflowStatus
   * @class
   * @param active {Array.<module:model/IoK8sApiCoreV1ObjectReference>} Active is a list of active workflows stemming from this CronWorkflow
   * @param conditions {Array.<module:model/IoArgoprojWorkflowV1alpha1Condition>} Conditions is a list of conditions the CronWorkflow may have
   * @param failed {Number} v3.6 and after: Failed counts how many times child workflows failed
   * @param lastScheduledTime {module:model/IoK8sApimachineryPkgApisMetaV1Time} 
   * @param phase {String} v3.6 and after: Phase is an enum of Active or Stopped. It changes to Stopped when stopStrategy.expression is true
   * @param succeeded {Number} v3.6 and after: Succeeded counts how many times child workflows succeeded
   */
  constructor(active, conditions, failed, lastScheduledTime, phase, succeeded) {
    this.active = active;
    this.conditions = conditions;
    this.failed = failed;
    this.lastScheduledTime = lastScheduledTime;
    this.phase = phase;
    this.succeeded = succeeded;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1CronWorkflowStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1CronWorkflowStatus} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1CronWorkflowStatus} The populated <code>IoArgoprojWorkflowV1alpha1CronWorkflowStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1CronWorkflowStatus();
      if (data.hasOwnProperty('active'))
        obj.active = ApiClient.convertToType(data['active'], [IoK8sApiCoreV1ObjectReference]);
      if (data.hasOwnProperty('conditions'))
        obj.conditions = ApiClient.convertToType(data['conditions'], [IoArgoprojWorkflowV1alpha1Condition]);
      if (data.hasOwnProperty('failed'))
        obj.failed = ApiClient.convertToType(data['failed'], 'Number');
      if (data.hasOwnProperty('lastScheduledTime'))
        obj.lastScheduledTime = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['lastScheduledTime']);
      if (data.hasOwnProperty('phase'))
        obj.phase = ApiClient.convertToType(data['phase'], 'String');
      if (data.hasOwnProperty('succeeded'))
        obj.succeeded = ApiClient.convertToType(data['succeeded'], 'Number');
    }
    return obj;
  }
}

/**
 * Active is a list of active workflows stemming from this CronWorkflow
 * @member {Array.<module:model/IoK8sApiCoreV1ObjectReference>} active
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.active = undefined;

/**
 * Conditions is a list of conditions the CronWorkflow may have
 * @member {Array.<module:model/IoArgoprojWorkflowV1alpha1Condition>} conditions
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.conditions = undefined;

/**
 * v3.6 and after: Failed counts how many times child workflows failed
 * @member {Number} failed
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.failed = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} lastScheduledTime
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.lastScheduledTime = undefined;

/**
 * v3.6 and after: Phase is an enum of Active or Stopped. It changes to Stopped when stopStrategy.expression is true
 * @member {String} phase
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.phase = undefined;

/**
 * v3.6 and after: Succeeded counts how many times child workflows succeeded
 * @member {Number} succeeded
 */
IoArgoprojWorkflowV1alpha1CronWorkflowStatus.prototype.succeeded = undefined;

module.exports = IoArgoprojWorkflowV1alpha1CronWorkflowStatus;
