/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1ConfigMapKeySelector = require('./IoK8sApiCoreV1ConfigMapKeySelector');
const IoK8sApiCoreV1SecretKeySelector = require('./IoK8sApiCoreV1SecretKeySelector');

/**
 * The IoArgoprojWorkflowV1alpha1HDFSArtifact model module.
 * @module model/IoArgoprojWorkflowV1alpha1HDFSArtifact
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1HDFSArtifact {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1HDFSArtifact</code>.
   * HDFSArtifact is the location of an HDFS artifact
   * @alias module:model/IoArgoprojWorkflowV1alpha1HDFSArtifact
   * @class
   * @param path {String} Path is a file path in HDFS
   */
  constructor(path) {
    this.path = path;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1HDFSArtifact</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1HDFSArtifact} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1HDFSArtifact} The populated <code>IoArgoprojWorkflowV1alpha1HDFSArtifact</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1HDFSArtifact();
      if (data.hasOwnProperty('addresses'))
        obj.addresses = ApiClient.convertToType(data['addresses'], ['String']);
      if (data.hasOwnProperty('dataTransferProtection'))
        obj.dataTransferProtection = ApiClient.convertToType(data['dataTransferProtection'], 'String');
      if (data.hasOwnProperty('force'))
        obj.force = ApiClient.convertToType(data['force'], 'Boolean');
      if (data.hasOwnProperty('hdfsUser'))
        obj.hdfsUser = ApiClient.convertToType(data['hdfsUser'], 'String');
      if (data.hasOwnProperty('krbCCacheSecret'))
        obj.krbCCacheSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['krbCCacheSecret']);
      if (data.hasOwnProperty('krbConfigConfigMap'))
        obj.krbConfigConfigMap = IoK8sApiCoreV1ConfigMapKeySelector.constructFromObject(data['krbConfigConfigMap']);
      if (data.hasOwnProperty('krbKeytabSecret'))
        obj.krbKeytabSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['krbKeytabSecret']);
      if (data.hasOwnProperty('krbRealm'))
        obj.krbRealm = ApiClient.convertToType(data['krbRealm'], 'String');
      if (data.hasOwnProperty('krbServicePrincipalName'))
        obj.krbServicePrincipalName = ApiClient.convertToType(data['krbServicePrincipalName'], 'String');
      if (data.hasOwnProperty('krbUsername'))
        obj.krbUsername = ApiClient.convertToType(data['krbUsername'], 'String');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
    }
    return obj;
  }
}

/**
 * Addresses is accessible addresses of HDFS name nodes
 * @member {Array.<String>} addresses
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.addresses = undefined;

/**
 * DataTransferProtection is the protection level for HDFS data transfer. It corresponds to the dfs.data.transfer.protection configuration in HDFS.
 * @member {String} dataTransferProtection
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.dataTransferProtection = undefined;

/**
 * Force copies a file forcibly even if it exists
 * @member {Boolean} force
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.force = undefined;

/**
 * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
 * @member {String} hdfsUser
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.hdfsUser = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} krbCCacheSecret
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbCCacheSecret = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1ConfigMapKeySelector} krbConfigConfigMap
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbConfigConfigMap = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} krbKeytabSecret
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbKeytabSecret = undefined;

/**
 * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
 * @member {String} krbRealm
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbRealm = undefined;

/**
 * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
 * @member {String} krbServicePrincipalName
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbServicePrincipalName = undefined;

/**
 * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
 * @member {String} krbUsername
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.krbUsername = undefined;

/**
 * Path is a file path in HDFS
 * @member {String} path
 */
IoArgoprojWorkflowV1alpha1HDFSArtifact.prototype.path = undefined;

module.exports = IoArgoprojWorkflowV1alpha1HDFSArtifact;
