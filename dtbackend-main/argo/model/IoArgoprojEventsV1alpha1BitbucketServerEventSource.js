/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojEventsV1alpha1BitbucketServerRepository = require('./IoArgoprojEventsV1alpha1BitbucketServerRepository');
const IoArgoprojEventsV1alpha1EventSourceFilter = require('./IoArgoprojEventsV1alpha1EventSourceFilter');
const IoArgoprojEventsV1alpha1TLSConfig = require('./IoArgoprojEventsV1alpha1TLSConfig');
const IoArgoprojEventsV1alpha1WebhookContext = require('./IoArgoprojEventsV1alpha1WebhookContext');
const IoK8sApiCoreV1SecretKeySelector = require('./IoK8sApiCoreV1SecretKeySelector');

/**
 * The IoArgoprojEventsV1alpha1BitbucketServerEventSource model module.
 * @module model/IoArgoprojEventsV1alpha1BitbucketServerEventSource
 * @version VERSION
 */
class IoArgoprojEventsV1alpha1BitbucketServerEventSource {
  /**
   * Constructs a new <code>IoArgoprojEventsV1alpha1BitbucketServerEventSource</code>.
   * @alias module:model/IoArgoprojEventsV1alpha1BitbucketServerEventSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojEventsV1alpha1BitbucketServerEventSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojEventsV1alpha1BitbucketServerEventSource} obj Optional instance to populate.
   * @return {module:model/IoArgoprojEventsV1alpha1BitbucketServerEventSource} The populated <code>IoArgoprojEventsV1alpha1BitbucketServerEventSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojEventsV1alpha1BitbucketServerEventSource();
      if (data.hasOwnProperty('accessToken'))
        obj.accessToken = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['accessToken']);
      if (data.hasOwnProperty('bitbucketserverBaseURL'))
        obj.bitbucketserverBaseURL = ApiClient.convertToType(data['bitbucketserverBaseURL'], 'String');
      if (data.hasOwnProperty('deleteHookOnFinish'))
        obj.deleteHookOnFinish = ApiClient.convertToType(data['deleteHookOnFinish'], 'Boolean');
      if (data.hasOwnProperty('events'))
        obj.events = ApiClient.convertToType(data['events'], ['String']);
      if (data.hasOwnProperty('filter'))
        obj.filter = IoArgoprojEventsV1alpha1EventSourceFilter.constructFromObject(data['filter']);
      if (data.hasOwnProperty('metadata'))
        obj.metadata = ApiClient.convertToType(data['metadata'], {'String': 'String'});
      if (data.hasOwnProperty('projectKey'))
        obj.projectKey = ApiClient.convertToType(data['projectKey'], 'String');
      if (data.hasOwnProperty('repositories'))
        obj.repositories = ApiClient.convertToType(data['repositories'], [IoArgoprojEventsV1alpha1BitbucketServerRepository]);
      if (data.hasOwnProperty('repositorySlug'))
        obj.repositorySlug = ApiClient.convertToType(data['repositorySlug'], 'String');
      if (data.hasOwnProperty('tls'))
        obj.tls = IoArgoprojEventsV1alpha1TLSConfig.constructFromObject(data['tls']);
      if (data.hasOwnProperty('webhook'))
        obj.webhook = IoArgoprojEventsV1alpha1WebhookContext.constructFromObject(data['webhook']);
      if (data.hasOwnProperty('webhookSecret'))
        obj.webhookSecret = IoK8sApiCoreV1SecretKeySelector.constructFromObject(data['webhookSecret']);
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} accessToken
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.accessToken = undefined;

/**
 * @member {String} bitbucketserverBaseURL
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.bitbucketserverBaseURL = undefined;

/**
 * @member {Boolean} deleteHookOnFinish
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.deleteHookOnFinish = undefined;

/**
 * @member {Array.<String>} events
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.events = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1EventSourceFilter} filter
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.filter = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.metadata = undefined;

/**
 * @member {String} projectKey
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.projectKey = undefined;

/**
 * @member {Array.<module:model/IoArgoprojEventsV1alpha1BitbucketServerRepository>} repositories
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.repositories = undefined;

/**
 * @member {String} repositorySlug
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.repositorySlug = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1TLSConfig} tls
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.tls = undefined;

/**
 * @member {module:model/IoArgoprojEventsV1alpha1WebhookContext} webhook
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.webhook = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SecretKeySelector} webhookSecret
 */
IoArgoprojEventsV1alpha1BitbucketServerEventSource.prototype.webhookSecret = undefined;

module.exports = IoArgoprojEventsV1alpha1BitbucketServerEventSource;
