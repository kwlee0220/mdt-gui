/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1ArtGCStatus = require('./IoArgoprojWorkflowV1alpha1ArtGCStatus');
const IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus = require('./IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus');
const IoArgoprojWorkflowV1alpha1Condition = require('./IoArgoprojWorkflowV1alpha1Condition');
const IoArgoprojWorkflowV1alpha1NodeStatus = require('./IoArgoprojWorkflowV1alpha1NodeStatus');
const IoArgoprojWorkflowV1alpha1Outputs = require('./IoArgoprojWorkflowV1alpha1Outputs');
const IoArgoprojWorkflowV1alpha1SynchronizationStatus = require('./IoArgoprojWorkflowV1alpha1SynchronizationStatus');
const IoArgoprojWorkflowV1alpha1Template = require('./IoArgoprojWorkflowV1alpha1Template');
const IoArgoprojWorkflowV1alpha1WorkflowSpec = require('./IoArgoprojWorkflowV1alpha1WorkflowSpec');
const IoK8sApiCoreV1Volume = require('./IoK8sApiCoreV1Volume');
const IoK8sApimachineryPkgApisMetaV1Time = require('./IoK8sApimachineryPkgApisMetaV1Time');

/**
 * The IoArgoprojWorkflowV1alpha1WorkflowStatus model module.
 * @module model/IoArgoprojWorkflowV1alpha1WorkflowStatus
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1WorkflowStatus {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1WorkflowStatus</code>.
   * WorkflowStatus contains overall status information about a workflow
   * @alias module:model/IoArgoprojWorkflowV1alpha1WorkflowStatus
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1WorkflowStatus</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1WorkflowStatus} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1WorkflowStatus} The populated <code>IoArgoprojWorkflowV1alpha1WorkflowStatus</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1WorkflowStatus();
      if (data.hasOwnProperty('artifactGCStatus'))
        obj.artifactGCStatus = IoArgoprojWorkflowV1alpha1ArtGCStatus.constructFromObject(data['artifactGCStatus']);
      if (data.hasOwnProperty('artifactRepositoryRef'))
        obj.artifactRepositoryRef = IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.constructFromObject(data['artifactRepositoryRef']);
      if (data.hasOwnProperty('compressedNodes'))
        obj.compressedNodes = ApiClient.convertToType(data['compressedNodes'], 'String');
      if (data.hasOwnProperty('conditions'))
        obj.conditions = ApiClient.convertToType(data['conditions'], [IoArgoprojWorkflowV1alpha1Condition]);
      if (data.hasOwnProperty('estimatedDuration'))
        obj.estimatedDuration = ApiClient.convertToType(data['estimatedDuration'], 'Number');
      if (data.hasOwnProperty('finishedAt'))
        obj.finishedAt = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['finishedAt']);
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('nodes'))
        obj.nodes = ApiClient.convertToType(data['nodes'], {'String': IoArgoprojWorkflowV1alpha1NodeStatus});
      if (data.hasOwnProperty('offloadNodeStatusVersion'))
        obj.offloadNodeStatusVersion = ApiClient.convertToType(data['offloadNodeStatusVersion'], 'String');
      if (data.hasOwnProperty('outputs'))
        obj.outputs = IoArgoprojWorkflowV1alpha1Outputs.constructFromObject(data['outputs']);
      if (data.hasOwnProperty('persistentVolumeClaims'))
        obj.persistentVolumeClaims = ApiClient.convertToType(data['persistentVolumeClaims'], [IoK8sApiCoreV1Volume]);
      if (data.hasOwnProperty('phase'))
        obj.phase = ApiClient.convertToType(data['phase'], 'String');
      if (data.hasOwnProperty('progress'))
        obj.progress = ApiClient.convertToType(data['progress'], 'String');
      if (data.hasOwnProperty('resourcesDuration'))
        obj.resourcesDuration = ApiClient.convertToType(data['resourcesDuration'], {'String': 'Number'});
      if (data.hasOwnProperty('startedAt'))
        obj.startedAt = IoK8sApimachineryPkgApisMetaV1Time.constructFromObject(data['startedAt']);
      if (data.hasOwnProperty('storedTemplates'))
        obj.storedTemplates = ApiClient.convertToType(data['storedTemplates'], {'String': IoArgoprojWorkflowV1alpha1Template});
      if (data.hasOwnProperty('storedWorkflowTemplateSpec'))
        obj.storedWorkflowTemplateSpec = IoArgoprojWorkflowV1alpha1WorkflowSpec.constructFromObject(data['storedWorkflowTemplateSpec']);
      if (data.hasOwnProperty('synchronization'))
        obj.synchronization = IoArgoprojWorkflowV1alpha1SynchronizationStatus.constructFromObject(data['synchronization']);
      if (data.hasOwnProperty('taskResultsCompletionStatus'))
        obj.taskResultsCompletionStatus = ApiClient.convertToType(data['taskResultsCompletionStatus'], {'String': 'Boolean'});
    }
    return obj;
  }
}

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtGCStatus} artifactGCStatus
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.artifactGCStatus = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus} artifactRepositoryRef
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.artifactRepositoryRef = undefined;

/**
 * Compressed and base64 decoded Nodes map
 * @member {String} compressedNodes
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.compressedNodes = undefined;

/**
 * Conditions is a list of conditions the Workflow may have
 * @member {Array.<module:model/IoArgoprojWorkflowV1alpha1Condition>} conditions
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.conditions = undefined;

/**
 * EstimatedDuration in seconds.
 * @member {Number} estimatedDuration
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.estimatedDuration = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} finishedAt
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.finishedAt = undefined;

/**
 * A human readable message indicating details about why the workflow is in this condition.
 * @member {String} message
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.message = undefined;

/**
 * Nodes is a mapping between a node ID and the node's status.
 * @member {Object.<String, module:model/IoArgoprojWorkflowV1alpha1NodeStatus>} nodes
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.nodes = undefined;

/**
 * Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
 * @member {String} offloadNodeStatusVersion
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.offloadNodeStatusVersion = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1Outputs} outputs
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.outputs = undefined;

/**
 * PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
 * @member {Array.<module:model/IoK8sApiCoreV1Volume>} persistentVolumeClaims
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.persistentVolumeClaims = undefined;

/**
 * Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \"\" (Unknown), \"Pending\", or \"Running\" before the workflow is completed, and \"Succeeded\", \"Failed\" or \"Error\" once the workflow has completed.
 * @member {String} phase
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.phase = undefined;

/**
 * Progress to completion
 * @member {String} progress
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.progress = undefined;

/**
 * ResourcesDuration is the total for the workflow
 * @member {Object.<String, Number>} resourcesDuration
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.resourcesDuration = undefined;

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1Time} startedAt
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.startedAt = undefined;

/**
 * StoredTemplates is a mapping between a template ref and the node's status.
 * @member {Object.<String, module:model/IoArgoprojWorkflowV1alpha1Template>} storedTemplates
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.storedTemplates = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1WorkflowSpec} storedWorkflowTemplateSpec
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.storedWorkflowTemplateSpec = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1SynchronizationStatus} synchronization
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.synchronization = undefined;

/**
 * TaskResultsCompletionStatus tracks task result completion status (mapped by node ID). Used to prevent premature archiving and garbage collection.
 * @member {Object.<String, Boolean>} taskResultsCompletionStatus
 */
IoArgoprojWorkflowV1alpha1WorkflowStatus.prototype.taskResultsCompletionStatus = undefined;

module.exports = IoArgoprojWorkflowV1alpha1WorkflowStatus;
