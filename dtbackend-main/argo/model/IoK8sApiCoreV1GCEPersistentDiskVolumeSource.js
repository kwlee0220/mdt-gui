/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1GCEPersistentDiskVolumeSource model module.
 * @module model/IoK8sApiCoreV1GCEPersistentDiskVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1GCEPersistentDiskVolumeSource</code>.
   * Represents a Persistent Disk resource in Google Compute Engine.  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1GCEPersistentDiskVolumeSource
   * @class
   * @param pdName {String} pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   */
  constructor(pdName) {
    this.pdName = pdName;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1GCEPersistentDiskVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1GCEPersistentDiskVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1GCEPersistentDiskVolumeSource} The populated <code>IoK8sApiCoreV1GCEPersistentDiskVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1GCEPersistentDiskVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('partition'))
        obj.partition = ApiClient.convertToType(data['partition'], 'Number');
      if (data.hasOwnProperty('pdName'))
        obj.pdName = ApiClient.convertToType(data['pdName'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
    }
    return obj;
  }
}

/**
 * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 * @member {String} fsType
 */
IoK8sApiCoreV1GCEPersistentDiskVolumeSource.prototype.fsType = undefined;

/**
 * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 * @member {Number} partition
 */
IoK8sApiCoreV1GCEPersistentDiskVolumeSource.prototype.partition = undefined;

/**
 * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 * @member {String} pdName
 */
IoK8sApiCoreV1GCEPersistentDiskVolumeSource.prototype.pdName = undefined;

/**
 * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1GCEPersistentDiskVolumeSource.prototype.readOnly = undefined;

module.exports = IoK8sApiCoreV1GCEPersistentDiskVolumeSource;
