/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1VolumeMount model module.
 * @module model/IoK8sApiCoreV1VolumeMount
 * @version VERSION
 */
class IoK8sApiCoreV1VolumeMount {
  /**
   * Constructs a new <code>IoK8sApiCoreV1VolumeMount</code>.
   * VolumeMount describes a mounting of a Volume within a container.
   * @alias module:model/IoK8sApiCoreV1VolumeMount
   * @class
   * @param mountPath {String} Path within the container at which the volume should be mounted.  Must not contain ':'.
   * @param name {String} This must match the Name of a Volume.
   */
  constructor(mountPath, name) {
    this.mountPath = mountPath;
    this.name = name;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1VolumeMount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1VolumeMount} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1VolumeMount} The populated <code>IoK8sApiCoreV1VolumeMount</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1VolumeMount();
      if (data.hasOwnProperty('mountPath'))
        obj.mountPath = ApiClient.convertToType(data['mountPath'], 'String');
      if (data.hasOwnProperty('mountPropagation'))
        obj.mountPropagation = ApiClient.convertToType(data['mountPropagation'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('recursiveReadOnly'))
        obj.recursiveReadOnly = ApiClient.convertToType(data['recursiveReadOnly'], 'String');
      if (data.hasOwnProperty('subPath'))
        obj.subPath = ApiClient.convertToType(data['subPath'], 'String');
      if (data.hasOwnProperty('subPathExpr'))
        obj.subPathExpr = ApiClient.convertToType(data['subPathExpr'], 'String');
    }
    return obj;
  }
}

/**
 * Path within the container at which the volume should be mounted.  Must not contain ':'.
 * @member {String} mountPath
 */
IoK8sApiCoreV1VolumeMount.prototype.mountPath = undefined;

/**
 * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
 * @member {String} mountPropagation
 */
IoK8sApiCoreV1VolumeMount.prototype.mountPropagation = undefined;

/**
 * This must match the Name of a Volume.
 * @member {String} name
 */
IoK8sApiCoreV1VolumeMount.prototype.name = undefined;

/**
 * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1VolumeMount.prototype.readOnly = undefined;

/**
 * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.  If ReadOnly is false, this field has no meaning and must be unspecified.  If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.  If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).  If this field is not specified, it is treated as an equivalent of Disabled.
 * @member {String} recursiveReadOnly
 */
IoK8sApiCoreV1VolumeMount.prototype.recursiveReadOnly = undefined;

/**
 * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).
 * @member {String} subPath
 */
IoK8sApiCoreV1VolumeMount.prototype.subPath = undefined;

/**
 * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.
 * @member {String} subPathExpr
 */
IoK8sApiCoreV1VolumeMount.prototype.subPathExpr = undefined;

module.exports = IoK8sApiCoreV1VolumeMount;
