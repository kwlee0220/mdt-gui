/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1StorageOSVolumeSource model module.
 * @module model/IoK8sApiCoreV1StorageOSVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1StorageOSVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1StorageOSVolumeSource</code>.
   * Represents a StorageOS persistent volume resource.
   * @alias module:model/IoK8sApiCoreV1StorageOSVolumeSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1StorageOSVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1StorageOSVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1StorageOSVolumeSource} The populated <code>IoK8sApiCoreV1StorageOSVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1StorageOSVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('secretRef'))
        obj.secretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['secretRef']);
      if (data.hasOwnProperty('volumeName'))
        obj.volumeName = ApiClient.convertToType(data['volumeName'], 'String');
      if (data.hasOwnProperty('volumeNamespace'))
        obj.volumeNamespace = ApiClient.convertToType(data['volumeNamespace'], 'String');
    }
    return obj;
  }
}

/**
 * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
IoK8sApiCoreV1StorageOSVolumeSource.prototype.fsType = undefined;

/**
 * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1StorageOSVolumeSource.prototype.readOnly = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} secretRef
 */
IoK8sApiCoreV1StorageOSVolumeSource.prototype.secretRef = undefined;

/**
 * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
 * @member {String} volumeName
 */
IoK8sApiCoreV1StorageOSVolumeSource.prototype.volumeName = undefined;

/**
 * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
 * @member {String} volumeNamespace
 */
IoK8sApiCoreV1StorageOSVolumeSource.prototype.volumeNamespace = undefined;

module.exports = IoK8sApiCoreV1StorageOSVolumeSource;
