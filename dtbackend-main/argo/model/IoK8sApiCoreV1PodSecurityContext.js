/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1AppArmorProfile = require('./IoK8sApiCoreV1AppArmorProfile');
const IoK8sApiCoreV1SELinuxOptions = require('./IoK8sApiCoreV1SELinuxOptions');
const IoK8sApiCoreV1SeccompProfile = require('./IoK8sApiCoreV1SeccompProfile');
const IoK8sApiCoreV1Sysctl = require('./IoK8sApiCoreV1Sysctl');
const IoK8sApiCoreV1WindowsSecurityContextOptions = require('./IoK8sApiCoreV1WindowsSecurityContextOptions');

/**
 * The IoK8sApiCoreV1PodSecurityContext model module.
 * @module model/IoK8sApiCoreV1PodSecurityContext
 * @version VERSION
 */
class IoK8sApiCoreV1PodSecurityContext {
  /**
   * Constructs a new <code>IoK8sApiCoreV1PodSecurityContext</code>.
   * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
   * @alias module:model/IoK8sApiCoreV1PodSecurityContext
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1PodSecurityContext</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1PodSecurityContext} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1PodSecurityContext} The populated <code>IoK8sApiCoreV1PodSecurityContext</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1PodSecurityContext();
      if (data.hasOwnProperty('appArmorProfile'))
        obj.appArmorProfile = IoK8sApiCoreV1AppArmorProfile.constructFromObject(data['appArmorProfile']);
      if (data.hasOwnProperty('fsGroup'))
        obj.fsGroup = ApiClient.convertToType(data['fsGroup'], 'Number');
      if (data.hasOwnProperty('fsGroupChangePolicy'))
        obj.fsGroupChangePolicy = ApiClient.convertToType(data['fsGroupChangePolicy'], 'String');
      if (data.hasOwnProperty('runAsGroup'))
        obj.runAsGroup = ApiClient.convertToType(data['runAsGroup'], 'Number');
      if (data.hasOwnProperty('runAsNonRoot'))
        obj.runAsNonRoot = ApiClient.convertToType(data['runAsNonRoot'], 'Boolean');
      if (data.hasOwnProperty('runAsUser'))
        obj.runAsUser = ApiClient.convertToType(data['runAsUser'], 'Number');
      if (data.hasOwnProperty('seLinuxOptions'))
        obj.seLinuxOptions = IoK8sApiCoreV1SELinuxOptions.constructFromObject(data['seLinuxOptions']);
      if (data.hasOwnProperty('seccompProfile'))
        obj.seccompProfile = IoK8sApiCoreV1SeccompProfile.constructFromObject(data['seccompProfile']);
      if (data.hasOwnProperty('supplementalGroups'))
        obj.supplementalGroups = ApiClient.convertToType(data['supplementalGroups'], ['Number']);
      if (data.hasOwnProperty('supplementalGroupsPolicy'))
        obj.supplementalGroupsPolicy = ApiClient.convertToType(data['supplementalGroupsPolicy'], 'String');
      if (data.hasOwnProperty('sysctls'))
        obj.sysctls = ApiClient.convertToType(data['sysctls'], [IoK8sApiCoreV1Sysctl]);
      if (data.hasOwnProperty('windowsOptions'))
        obj.windowsOptions = IoK8sApiCoreV1WindowsSecurityContextOptions.constructFromObject(data['windowsOptions']);
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApiCoreV1AppArmorProfile} appArmorProfile
 */
IoK8sApiCoreV1PodSecurityContext.prototype.appArmorProfile = undefined;

/**
 * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} fsGroup
 */
IoK8sApiCoreV1PodSecurityContext.prototype.fsGroup = undefined;

/**
 * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} fsGroupChangePolicy
 */
IoK8sApiCoreV1PodSecurityContext.prototype.fsGroupChangePolicy = undefined;

/**
 * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsGroup
 */
IoK8sApiCoreV1PodSecurityContext.prototype.runAsGroup = undefined;

/**
 * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 * @member {Boolean} runAsNonRoot
 */
IoK8sApiCoreV1PodSecurityContext.prototype.runAsNonRoot = undefined;

/**
 * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 * @member {Number} runAsUser
 */
IoK8sApiCoreV1PodSecurityContext.prototype.runAsUser = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SELinuxOptions} seLinuxOptions
 */
IoK8sApiCoreV1PodSecurityContext.prototype.seLinuxOptions = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1SeccompProfile} seccompProfile
 */
IoK8sApiCoreV1PodSecurityContext.prototype.seccompProfile = undefined;

/**
 * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<Number>} supplementalGroups
 */
IoK8sApiCoreV1PodSecurityContext.prototype.supplementalGroups = undefined;

/**
 * Defines how supplemental groups of the first container processes are calculated. Valid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
 * @member {String} supplementalGroupsPolicy
 */
IoK8sApiCoreV1PodSecurityContext.prototype.supplementalGroupsPolicy = undefined;

/**
 * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
 * @member {Array.<module:model/IoK8sApiCoreV1Sysctl>} sysctls
 */
IoK8sApiCoreV1PodSecurityContext.prototype.sysctls = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1WindowsSecurityContextOptions} windowsOptions
 */
IoK8sApiCoreV1PodSecurityContext.prototype.windowsOptions = undefined;

module.exports = IoK8sApiCoreV1PodSecurityContext;
