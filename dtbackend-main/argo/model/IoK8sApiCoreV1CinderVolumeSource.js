/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1CinderVolumeSource model module.
 * @module model/IoK8sApiCoreV1CinderVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1CinderVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1CinderVolumeSource</code>.
   * Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1CinderVolumeSource
   * @class
   * @param volumeID {String} volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   */
  constructor(volumeID) {
    this.volumeID = volumeID;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1CinderVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1CinderVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1CinderVolumeSource} The populated <code>IoK8sApiCoreV1CinderVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1CinderVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('secretRef'))
        obj.secretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['secretRef']);
      if (data.hasOwnProperty('volumeID'))
        obj.volumeID = ApiClient.convertToType(data['volumeID'], 'String');
    }
    return obj;
  }
}

/**
 * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
 * @member {String} fsType
 */
IoK8sApiCoreV1CinderVolumeSource.prototype.fsType = undefined;

/**
 * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1CinderVolumeSource.prototype.readOnly = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} secretRef
 */
IoK8sApiCoreV1CinderVolumeSource.prototype.secretRef = undefined;

/**
 * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
 * @member {String} volumeID
 */
IoK8sApiCoreV1CinderVolumeSource.prototype.volumeID = undefined;

module.exports = IoK8sApiCoreV1CinderVolumeSource;
