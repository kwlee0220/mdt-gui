/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource model module.
 * @module model/IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource</code>.
   * Represents a Persistent Disk resource in AWS.  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource
   * @class
   * @param volumeID {String} volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   */
  constructor(volumeID) {
    this.volumeID = volumeID;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource} The populated <code>IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('partition'))
        obj.partition = ApiClient.convertToType(data['partition'], 'Number');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('volumeID'))
        obj.volumeID = ApiClient.convertToType(data['volumeID'], 'String');
    }
    return obj;
  }
}

/**
 * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
 * @member {String} fsType
 */
IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.prototype.fsType = undefined;

/**
 * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).
 * @member {Number} partition
 */
IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.prototype.partition = undefined;

/**
 * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.prototype.readOnly = undefined;

/**
 * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
 * @member {String} volumeID
 */
IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.prototype.volumeID = undefined;

module.exports = IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource;
