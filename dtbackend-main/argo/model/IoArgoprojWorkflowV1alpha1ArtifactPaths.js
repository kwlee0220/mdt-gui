/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoArgoprojWorkflowV1alpha1ArchiveStrategy = require('./IoArgoprojWorkflowV1alpha1ArchiveStrategy');
const IoArgoprojWorkflowV1alpha1ArtifactGC = require('./IoArgoprojWorkflowV1alpha1ArtifactGC');
const IoArgoprojWorkflowV1alpha1ArtifactoryArtifact = require('./IoArgoprojWorkflowV1alpha1ArtifactoryArtifact');
const IoArgoprojWorkflowV1alpha1AzureArtifact = require('./IoArgoprojWorkflowV1alpha1AzureArtifact');
const IoArgoprojWorkflowV1alpha1GCSArtifact = require('./IoArgoprojWorkflowV1alpha1GCSArtifact');
const IoArgoprojWorkflowV1alpha1GitArtifact = require('./IoArgoprojWorkflowV1alpha1GitArtifact');
const IoArgoprojWorkflowV1alpha1HDFSArtifact = require('./IoArgoprojWorkflowV1alpha1HDFSArtifact');
const IoArgoprojWorkflowV1alpha1HTTPArtifact = require('./IoArgoprojWorkflowV1alpha1HTTPArtifact');
const IoArgoprojWorkflowV1alpha1OSSArtifact = require('./IoArgoprojWorkflowV1alpha1OSSArtifact');
const IoArgoprojWorkflowV1alpha1RawArtifact = require('./IoArgoprojWorkflowV1alpha1RawArtifact');
const IoArgoprojWorkflowV1alpha1S3Artifact = require('./IoArgoprojWorkflowV1alpha1S3Artifact');

/**
 * The IoArgoprojWorkflowV1alpha1ArtifactPaths model module.
 * @module model/IoArgoprojWorkflowV1alpha1ArtifactPaths
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1ArtifactPaths {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1ArtifactPaths</code>.
   * ArtifactPaths expands a step from a collection of artifacts
   * @alias module:model/IoArgoprojWorkflowV1alpha1ArtifactPaths
   * @class
   * @param name {String} name of the artifact. must be unique within a template's inputs/outputs.
   */
  constructor(name) {
    this.name = name;
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1ArtifactPaths</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1ArtifactPaths} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1ArtifactPaths} The populated <code>IoArgoprojWorkflowV1alpha1ArtifactPaths</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1ArtifactPaths();
      if (data.hasOwnProperty('archive'))
        obj.archive = IoArgoprojWorkflowV1alpha1ArchiveStrategy.constructFromObject(data['archive']);
      if (data.hasOwnProperty('archiveLogs'))
        obj.archiveLogs = ApiClient.convertToType(data['archiveLogs'], 'Boolean');
      if (data.hasOwnProperty('artifactGC'))
        obj.artifactGC = IoArgoprojWorkflowV1alpha1ArtifactGC.constructFromObject(data['artifactGC']);
      if (data.hasOwnProperty('artifactory'))
        obj.artifactory = IoArgoprojWorkflowV1alpha1ArtifactoryArtifact.constructFromObject(data['artifactory']);
      if (data.hasOwnProperty('azure'))
        obj.azure = IoArgoprojWorkflowV1alpha1AzureArtifact.constructFromObject(data['azure']);
      if (data.hasOwnProperty('deleted'))
        obj.deleted = ApiClient.convertToType(data['deleted'], 'Boolean');
      if (data.hasOwnProperty('from'))
        obj.from = ApiClient.convertToType(data['from'], 'String');
      if (data.hasOwnProperty('fromExpression'))
        obj.fromExpression = ApiClient.convertToType(data['fromExpression'], 'String');
      if (data.hasOwnProperty('gcs'))
        obj.gcs = IoArgoprojWorkflowV1alpha1GCSArtifact.constructFromObject(data['gcs']);
      if (data.hasOwnProperty('git'))
        obj.git = IoArgoprojWorkflowV1alpha1GitArtifact.constructFromObject(data['git']);
      if (data.hasOwnProperty('globalName'))
        obj.globalName = ApiClient.convertToType(data['globalName'], 'String');
      if (data.hasOwnProperty('hdfs'))
        obj.hdfs = IoArgoprojWorkflowV1alpha1HDFSArtifact.constructFromObject(data['hdfs']);
      if (data.hasOwnProperty('http'))
        obj.http = IoArgoprojWorkflowV1alpha1HTTPArtifact.constructFromObject(data['http']);
      if (data.hasOwnProperty('mode'))
        obj.mode = ApiClient.convertToType(data['mode'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('optional'))
        obj.optional = ApiClient.convertToType(data['optional'], 'Boolean');
      if (data.hasOwnProperty('oss'))
        obj.oss = IoArgoprojWorkflowV1alpha1OSSArtifact.constructFromObject(data['oss']);
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('raw'))
        obj.raw = IoArgoprojWorkflowV1alpha1RawArtifact.constructFromObject(data['raw']);
      if (data.hasOwnProperty('recurseMode'))
        obj.recurseMode = ApiClient.convertToType(data['recurseMode'], 'Boolean');
      if (data.hasOwnProperty('s3'))
        obj.s3 = IoArgoprojWorkflowV1alpha1S3Artifact.constructFromObject(data['s3']);
      if (data.hasOwnProperty('subPath'))
        obj.subPath = ApiClient.convertToType(data['subPath'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArchiveStrategy} archive
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.archive = undefined;

/**
 * ArchiveLogs indicates if the container logs should be archived
 * @member {Boolean} archiveLogs
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.archiveLogs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtifactGC} artifactGC
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.artifactGC = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1ArtifactoryArtifact} artifactory
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.artifactory = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1AzureArtifact} azure
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.azure = undefined;

/**
 * Has this been deleted?
 * @member {Boolean} deleted
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.deleted = undefined;

/**
 * From allows an artifact to reference an artifact from a previous step
 * @member {String} from
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.from = undefined;

/**
 * FromExpression, if defined, is evaluated to specify the value for the artifact
 * @member {String} fromExpression
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.fromExpression = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1GCSArtifact} gcs
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.gcs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1GitArtifact} git
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.git = undefined;

/**
 * GlobalName exports an output artifact to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
 * @member {String} globalName
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.globalName = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1HDFSArtifact} hdfs
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.hdfs = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1HTTPArtifact} http
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.http = undefined;

/**
 * mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
 * @member {Number} mode
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.mode = undefined;

/**
 * name of the artifact. must be unique within a template's inputs/outputs.
 * @member {String} name
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.name = undefined;

/**
 * Make Artifacts optional, if Artifacts doesn't generate or exist
 * @member {Boolean} optional
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.optional = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1OSSArtifact} oss
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.oss = undefined;

/**
 * Path is the container path to the artifact
 * @member {String} path
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.path = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1RawArtifact} raw
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.raw = undefined;

/**
 * If mode is set, apply the permission recursively into the artifact if it is a folder
 * @member {Boolean} recurseMode
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.recurseMode = undefined;

/**
 * @member {module:model/IoArgoprojWorkflowV1alpha1S3Artifact} s3
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.s3 = undefined;

/**
 * SubPath allows an artifact to be sourced from a subpath within the specified source
 * @member {String} subPath
 */
IoArgoprojWorkflowV1alpha1ArtifactPaths.prototype.subPath = undefined;

module.exports = IoArgoprojWorkflowV1alpha1ArtifactPaths;
