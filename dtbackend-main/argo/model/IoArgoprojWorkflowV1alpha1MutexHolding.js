/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoArgoprojWorkflowV1alpha1MutexHolding model module.
 * @module model/IoArgoprojWorkflowV1alpha1MutexHolding
 * @version VERSION
 */
class IoArgoprojWorkflowV1alpha1MutexHolding {
  /**
   * Constructs a new <code>IoArgoprojWorkflowV1alpha1MutexHolding</code>.
   * MutexHolding describes the mutex and the object which is holding it.
   * @alias module:model/IoArgoprojWorkflowV1alpha1MutexHolding
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoArgoprojWorkflowV1alpha1MutexHolding</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoArgoprojWorkflowV1alpha1MutexHolding} obj Optional instance to populate.
   * @return {module:model/IoArgoprojWorkflowV1alpha1MutexHolding} The populated <code>IoArgoprojWorkflowV1alpha1MutexHolding</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoArgoprojWorkflowV1alpha1MutexHolding();
      if (data.hasOwnProperty('holder'))
        obj.holder = ApiClient.convertToType(data['holder'], 'String');
      if (data.hasOwnProperty('mutex'))
        obj.mutex = ApiClient.convertToType(data['mutex'], 'String');
    }
    return obj;
  }
}

/**
 * Holder is a reference to the object which holds the Mutex. Holding Scenario:   1. Current workflow's NodeID which is holding the lock.      e.g: ${NodeID} Waiting Scenario:   1. Current workflow or other workflow NodeID which is holding the lock.      e.g: ${WorkflowName}/${NodeID}
 * @member {String} holder
 */
IoArgoprojWorkflowV1alpha1MutexHolding.prototype.holder = undefined;

/**
 * Reference for the mutex e.g: ${namespace}/mutex/${mutexName}
 * @member {String} mutex
 */
IoArgoprojWorkflowV1alpha1MutexHolding.prototype.mutex = undefined;

module.exports = IoArgoprojWorkflowV1alpha1MutexHolding;
