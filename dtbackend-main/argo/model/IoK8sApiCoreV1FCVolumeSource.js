/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');

/**
 * The IoK8sApiCoreV1FCVolumeSource model module.
 * @module model/IoK8sApiCoreV1FCVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1FCVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1FCVolumeSource</code>.
   * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
   * @alias module:model/IoK8sApiCoreV1FCVolumeSource
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1FCVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1FCVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1FCVolumeSource} The populated <code>IoK8sApiCoreV1FCVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1FCVolumeSource();
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('lun'))
        obj.lun = ApiClient.convertToType(data['lun'], 'Number');
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('targetWWNs'))
        obj.targetWWNs = ApiClient.convertToType(data['targetWWNs'], ['String']);
      if (data.hasOwnProperty('wwids'))
        obj.wwids = ApiClient.convertToType(data['wwids'], ['String']);
    }
    return obj;
  }
}

/**
 * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
 * @member {String} fsType
 */
IoK8sApiCoreV1FCVolumeSource.prototype.fsType = undefined;

/**
 * lun is Optional: FC target lun number
 * @member {Number} lun
 */
IoK8sApiCoreV1FCVolumeSource.prototype.lun = undefined;

/**
 * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1FCVolumeSource.prototype.readOnly = undefined;

/**
 * targetWWNs is Optional: FC target worldwide names (WWNs)
 * @member {Array.<String>} targetWWNs
 */
IoK8sApiCoreV1FCVolumeSource.prototype.targetWWNs = undefined;

/**
 * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
 * @member {Array.<String>} wwids
 */
IoK8sApiCoreV1FCVolumeSource.prototype.wwids = undefined;

module.exports = IoK8sApiCoreV1FCVolumeSource;
