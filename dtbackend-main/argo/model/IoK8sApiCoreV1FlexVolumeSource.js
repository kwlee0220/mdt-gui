/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApiCoreV1LocalObjectReference = require('./IoK8sApiCoreV1LocalObjectReference');

/**
 * The IoK8sApiCoreV1FlexVolumeSource model module.
 * @module model/IoK8sApiCoreV1FlexVolumeSource
 * @version VERSION
 */
class IoK8sApiCoreV1FlexVolumeSource {
  /**
   * Constructs a new <code>IoK8sApiCoreV1FlexVolumeSource</code>.
   * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
   * @alias module:model/IoK8sApiCoreV1FlexVolumeSource
   * @class
   * @param driver {String} driver is the name of the driver to use for this volume.
   */
  constructor(driver) {
    this.driver = driver;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1FlexVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1FlexVolumeSource} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1FlexVolumeSource} The populated <code>IoK8sApiCoreV1FlexVolumeSource</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1FlexVolumeSource();
      if (data.hasOwnProperty('driver'))
        obj.driver = ApiClient.convertToType(data['driver'], 'String');
      if (data.hasOwnProperty('fsType'))
        obj.fsType = ApiClient.convertToType(data['fsType'], 'String');
      if (data.hasOwnProperty('options'))
        obj.options = ApiClient.convertToType(data['options'], {'String': 'String'});
      if (data.hasOwnProperty('readOnly'))
        obj.readOnly = ApiClient.convertToType(data['readOnly'], 'Boolean');
      if (data.hasOwnProperty('secretRef'))
        obj.secretRef = IoK8sApiCoreV1LocalObjectReference.constructFromObject(data['secretRef']);
    }
    return obj;
  }
}

/**
 * driver is the name of the driver to use for this volume.
 * @member {String} driver
 */
IoK8sApiCoreV1FlexVolumeSource.prototype.driver = undefined;

/**
 * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
 * @member {String} fsType
 */
IoK8sApiCoreV1FlexVolumeSource.prototype.fsType = undefined;

/**
 * options is Optional: this field holds extra command options if any.
 * @member {Object.<String, String>} options
 */
IoK8sApiCoreV1FlexVolumeSource.prototype.options = undefined;

/**
 * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
 * @member {Boolean} readOnly
 */
IoK8sApiCoreV1FlexVolumeSource.prototype.readOnly = undefined;

/**
 * @member {module:model/IoK8sApiCoreV1LocalObjectReference} secretRef
 */
IoK8sApiCoreV1FlexVolumeSource.prototype.secretRef = undefined;

module.exports = IoK8sApiCoreV1FlexVolumeSource;
