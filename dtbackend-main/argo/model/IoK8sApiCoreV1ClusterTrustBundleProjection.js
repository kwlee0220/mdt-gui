/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * OpenAPI spec version: VERSION
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
const ApiClient = require('../ApiClient');
const IoK8sApimachineryPkgApisMetaV1LabelSelector = require('./IoK8sApimachineryPkgApisMetaV1LabelSelector');

/**
 * The IoK8sApiCoreV1ClusterTrustBundleProjection model module.
 * @module model/IoK8sApiCoreV1ClusterTrustBundleProjection
 * @version VERSION
 */
class IoK8sApiCoreV1ClusterTrustBundleProjection {
  /**
   * Constructs a new <code>IoK8sApiCoreV1ClusterTrustBundleProjection</code>.
   * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
   * @alias module:model/IoK8sApiCoreV1ClusterTrustBundleProjection
   * @class
   * @param path {String} Relative path from the volume root to write the bundle.
   */
  constructor(path) {
    this.path = path;
  }

  /**
   * Constructs a <code>IoK8sApiCoreV1ClusterTrustBundleProjection</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IoK8sApiCoreV1ClusterTrustBundleProjection} obj Optional instance to populate.
   * @return {module:model/IoK8sApiCoreV1ClusterTrustBundleProjection} The populated <code>IoK8sApiCoreV1ClusterTrustBundleProjection</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IoK8sApiCoreV1ClusterTrustBundleProjection();
      if (data.hasOwnProperty('labelSelector'))
        obj.labelSelector = IoK8sApimachineryPkgApisMetaV1LabelSelector.constructFromObject(data['labelSelector']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('optional'))
        obj.optional = ApiClient.convertToType(data['optional'], 'Boolean');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('signerName'))
        obj.signerName = ApiClient.convertToType(data['signerName'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/IoK8sApimachineryPkgApisMetaV1LabelSelector} labelSelector
 */
IoK8sApiCoreV1ClusterTrustBundleProjection.prototype.labelSelector = undefined;

/**
 * Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
 * @member {String} name
 */
IoK8sApiCoreV1ClusterTrustBundleProjection.prototype.name = undefined;

/**
 * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
 * @member {Boolean} optional
 */
IoK8sApiCoreV1ClusterTrustBundleProjection.prototype.optional = undefined;

/**
 * Relative path from the volume root to write the bundle.
 * @member {String} path
 */
IoK8sApiCoreV1ClusterTrustBundleProjection.prototype.path = undefined;

/**
 * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
 * @member {String} signerName
 */
IoK8sApiCoreV1ClusterTrustBundleProjection.prototype.signerName = undefined;

module.exports = IoK8sApiCoreV1ClusterTrustBundleProjection;
